package wrapffmpeg;
import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import com.sun.jna.ptr.ShortByReference;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.nio.ShortBuffer;
import wrapffmpeg.AVFrame.ByReference;
import wrapffmpeg.AVRational.ByValue;
/**
 * JNA Wrapper for library <b>avcodec</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface AvcodecLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = "avcodec";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(AvcodecLibrary.JNA_LIBRARY_NAME);
	public static final AvcodecLibrary INSTANCE = (AvcodecLibrary)Native.loadLibrary(AvcodecLibrary.JNA_LIBRARY_NAME, AvcodecLibrary.class);
	/**
	 * @ingroup lavc_encoding<br>
	 * motion estimation type.<br>
	 * <i>native declaration : libavcodec/avcodec.h:46</i><br>
	 * enum values
	 */
	public static interface Motion_Est_ID {
		/**
		 * < no search, that is use 0,0 vector whenever one is needed<br>
		 * <i>native declaration : libavcodec/avcodec.h:30</i>
		 */
		public static final int ME_ZERO = 1;
		/** <i>native declaration : libavcodec/avcodec.h:31</i> */
		public static final int ME_FULL = 2;
		/** <i>native declaration : libavcodec/avcodec.h:32</i> */
		public static final int ME_LOG = 3;
		/** <i>native declaration : libavcodec/avcodec.h:33</i> */
		public static final int ME_PHODS = 4;
		/**
		 * < enhanced predictive zonal search<br>
		 * <i>native declaration : libavcodec/avcodec.h:35</i>
		 */
		public static final int ME_EPZS = 5;
		/**
		 * < reserved for experiments<br>
		 * <i>native declaration : libavcodec/avcodec.h:37</i>
		 */
		public static final int ME_X1 = 6;
		/**
		 * < hexagon based search<br>
		 * <i>native declaration : libavcodec/avcodec.h:39</i>
		 */
		public static final int ME_HEX = 7;
		/**
		 * < uneven multi-hexagon search<br>
		 * <i>native declaration : libavcodec/avcodec.h:41</i>
		 */
		public static final int ME_UMH = 8;
		/**
		 * < transformed exhaustive search algorithm<br>
		 * <i>native declaration : libavcodec/avcodec.h:43</i>
		 */
		public static final int ME_TESA = 9;
		/**
		 * < iterative search<br>
		 * <i>native declaration : libavcodec/avcodec.h:45</i>
		 */
		public static final int ME_ITER = 50;
	};
	/**
	 * @ingroup lavc_decoding<br>
	 * <i>native declaration : libavcodec/avcodec.h:65</i><br>
	 * enum values
	 */
	public static interface AVDiscard {
		/**
		 * We leave some space between them for extensions (drop some<br>
		 * keyframes for intra-only or drop just some bidir frames).<br>
		 * < discard nothing<br>
		 * <i>native declaration : libavcodec/avcodec.h:54</i>
		 */
		public static final int AVDISCARD_NONE = -16;
		/**
		 * < discard useless packets like 0 size packets in avi<br>
		 * <i>native declaration : libavcodec/avcodec.h:56</i>
		 */
		public static final int AVDISCARD_DEFAULT = 0;
		/**
		 * < discard all non reference<br>
		 * <i>native declaration : libavcodec/avcodec.h:58</i>
		 */
		public static final int AVDISCARD_NONREF = 8;
		/**
		 * < discard all bidirectional frames<br>
		 * <i>native declaration : libavcodec/avcodec.h:60</i>
		 */
		public static final int AVDISCARD_BIDIR = 16;
		/**
		 * < discard all frames except keyframes<br>
		 * <i>native declaration : libavcodec/avcodec.h:62</i>
		 */
		public static final int AVDISCARD_NONKEY = 32;
		/**
		 * < discard all<br>
		 * <i>native declaration : libavcodec/avcodec.h:64</i>
		 */
		public static final int AVDISCARD_ALL = 48;
	};
	/**
	 * <i>native declaration : libavcodec/avcodec.h:80</i><br>
	 * enum values
	 */
	public static interface AVColorPrimaries {
		/**
		 * < also ITU-R BT1361 / IEC 61966-2-4 / SMPTE RP177 Annex B<br>
		 * <i>native declaration : libavcodec/avcodec.h:68</i>
		 */
		public static final int AVCOL_PRI_BT709 = 1;
		/** <i>native declaration : libavcodec/avcodec.h:69</i> */
		public static final int AVCOL_PRI_UNSPECIFIED = 2;
		/** <i>native declaration : libavcodec/avcodec.h:70</i> */
		public static final int AVCOL_PRI_BT470M = 4;
		/**
		 * < also ITU-R BT601-6 625 / ITU-R BT1358 625 / ITU-R BT1700 625 PAL & SECAM<br>
		 * <i>native declaration : libavcodec/avcodec.h:72</i>
		 */
		public static final int AVCOL_PRI_BT470BG = 5;
		/**
		 * < also ITU-R BT601-6 525 / ITU-R BT1358 525 / ITU-R BT1700 NTSC<br>
		 * <i>native declaration : libavcodec/avcodec.h:74</i>
		 */
		public static final int AVCOL_PRI_SMPTE170M = 6;
		/**
		 * < functionally identical to above<br>
		 * <i>native declaration : libavcodec/avcodec.h:76</i>
		 */
		public static final int AVCOL_PRI_SMPTE240M = 7;
		/** <i>native declaration : libavcodec/avcodec.h:77</i> */
		public static final int AVCOL_PRI_FILM = 8;
		/**
		 * < Not part of ABI<br>
		 * <i>native declaration : libavcodec/avcodec.h:79</i>
		 */
		public static final int AVCOL_PRI_NB = 9;
	};
	/**
	 * <i>native declaration : libavcodec/avcodec.h:92</i><br>
	 * enum values
	 */
	public static interface AVColorTransferCharacteristic {
		/**
		 * < also ITU-R BT1361<br>
		 * <i>native declaration : libavcodec/avcodec.h:83</i>
		 */
		public static final int AVCOL_TRC_BT709 = 1;
		/** <i>native declaration : libavcodec/avcodec.h:84</i> */
		public static final int AVCOL_TRC_UNSPECIFIED = 2;
		/**
		 * < also ITU-R BT470M / ITU-R BT1700 625 PAL & SECAM<br>
		 * <i>native declaration : libavcodec/avcodec.h:86</i>
		 */
		public static final int AVCOL_TRC_GAMMA22 = 4;
		/**
		 * < also ITU-R BT470BG<br>
		 * <i>native declaration : libavcodec/avcodec.h:88</i>
		 */
		public static final int AVCOL_TRC_GAMMA28 = 5;
		/** <i>native declaration : libavcodec/avcodec.h:89</i> */
		public static final int AVCOL_TRC_SMPTE240M = 7;
		/**
		 * < Not part of ABI<br>
		 * <i>native declaration : libavcodec/avcodec.h:91</i>
		 */
		public static final int AVCOL_TRC_NB = 8;
	};
	/**
	 * X   X      3 4 X      X are luma samples,<br>
	 *             1 2        1-6 are possible chroma positions<br>
	 *  X   X      5 6 X      0 is undefined/unknown position<br>
	 * <i>native declaration : libavcodec/avcodec.h:111</i><br>
	 * enum values
	 */
	public static interface AVChromaLocation {
		/** <i>native declaration : libavcodec/avcodec.h:99</i> */
		public static final int AVCHROMA_LOC_UNSPECIFIED = 0;
		/**
		 * < mpeg2/4, h264 default<br>
		 * <i>native declaration : libavcodec/avcodec.h:101</i>
		 */
		public static final int AVCHROMA_LOC_LEFT = 1;
		/**
		 * < mpeg1, jpeg, h263<br>
		 * <i>native declaration : libavcodec/avcodec.h:103</i>
		 */
		public static final int AVCHROMA_LOC_CENTER = 2;
		/**
		 * < DV<br>
		 * <i>native declaration : libavcodec/avcodec.h:105</i>
		 */
		public static final int AVCHROMA_LOC_TOPLEFT = 3;
		/** <i>native declaration : libavcodec/avcodec.h:106</i> */
		public static final int AVCHROMA_LOC_TOP = 4;
		/** <i>native declaration : libavcodec/avcodec.h:107</i> */
		public static final int AVCHROMA_LOC_BOTTOMLEFT = 5;
		/** <i>native declaration : libavcodec/avcodec.h:108</i> */
		public static final int AVCHROMA_LOC_BOTTOM = 6;
		/**
		 * < Not part of ABI<br>
		 * <i>native declaration : libavcodec/avcodec.h:110</i>
		 */
		public static final int AVCHROMA_LOC_NB = 7;
	};
	/**
	 * <i>native declaration : libavcodec/avcodec.h:124</i><br>
	 * enum values
	 */
	public static interface AVAudioServiceType {
		/** <i>native declaration : libavcodec/avcodec.h:113</i> */
		public static final int AV_AUDIO_SERVICE_TYPE_MAIN = 0;
		/** <i>native declaration : libavcodec/avcodec.h:114</i> */
		public static final int AV_AUDIO_SERVICE_TYPE_EFFECTS = 1;
		/** <i>native declaration : libavcodec/avcodec.h:115</i> */
		public static final int AV_AUDIO_SERVICE_TYPE_VISUALLY_IMPAIRED = 2;
		/** <i>native declaration : libavcodec/avcodec.h:116</i> */
		public static final int AV_AUDIO_SERVICE_TYPE_HEARING_IMPAIRED = 3;
		/** <i>native declaration : libavcodec/avcodec.h:117</i> */
		public static final int AV_AUDIO_SERVICE_TYPE_DIALOGUE = 4;
		/** <i>native declaration : libavcodec/avcodec.h:118</i> */
		public static final int AV_AUDIO_SERVICE_TYPE_COMMENTARY = 5;
		/** <i>native declaration : libavcodec/avcodec.h:119</i> */
		public static final int AV_AUDIO_SERVICE_TYPE_EMERGENCY = 6;
		/** <i>native declaration : libavcodec/avcodec.h:120</i> */
		public static final int AV_AUDIO_SERVICE_TYPE_VOICE_OVER = 7;
		/** <i>native declaration : libavcodec/avcodec.h:121</i> */
		public static final int AV_AUDIO_SERVICE_TYPE_KARAOKE = 8;
		/**
		 * < Not part of ABI<br>
		 * <i>native declaration : libavcodec/avcodec.h:123</i>
		 */
		public static final int AV_AUDIO_SERVICE_TYPE_NB = 9;
	};
	/**
	 * @defgroup lavc_packet AVPacket<br>
	 * * Types and functions for working with AVPacket.<br>
	 * @{<br>
	 * <i>native declaration : libavcodec/avcodec.h:251</i><br>
	 * enum values
	 */
	public static interface AVPacketSideDataType {
		/** <i>native declaration : libavcodec/avcodec.h:165</i> */
		public static final int AV_PKT_DATA_PALETTE = 0;
		/** <i>native declaration : libavcodec/avcodec.h:166</i> */
		public static final int AV_PKT_DATA_NEW_EXTRADATA = 1;
		/**
		 * An AV_PKT_DATA_PARAM_CHANGE side data packet is laid out as follows:<br>
		 * @code<br>
		 * u32le param_flags<br>
		 * if (param_flags & AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT)<br>
		 *     s32le channel_count<br>
		 * if (param_flags & AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT)<br>
		 *     u64le channel_layout<br>
		 * if (param_flags & AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE)<br>
		 *     s32le sample_rate<br>
		 * if (param_flags & AV_SIDE_DATA_PARAM_CHANGE_DIMENSIONS)<br>
		 *     s32le width<br>
		 *     s32le height<br>
		 * @endcode<br>
		 * <i>native declaration : libavcodec/avcodec.h:182</i>
		 */
		public static final int AV_PKT_DATA_PARAM_CHANGE = 2;
		/**
		 * An AV_PKT_DATA_H263_MB_INFO side data packet contains a number of<br>
		 * structures with info about macroblocks relevant to splitting the<br>
		 * packet into smaller packets on macroblock edges (e.g. as for RFC 2190).<br>
		 * That is, it does not necessarily contain info about all macroblocks,<br>
		 * as long as the distance between macroblocks in the info is smaller<br>
		 * than the target payload size.<br>
		 * Each MB info structure is 12 bytes, and is laid out as follows:<br>
		 * @code<br>
		 * u32le bit offset from the start of the packet<br>
		 * u8    current quantizer at the start of the macroblock<br>
		 * u8    GOB number<br>
		 * u16le macroblock address within the GOB<br>
		 * u8    horizontal MV predictor<br>
		 * u8    vertical MV predictor<br>
		 * u8    horizontal MV predictor for block number 3<br>
		 * u8    vertical MV predictor for block number 3<br>
		 * @endcode<br>
		 * <i>native declaration : libavcodec/avcodec.h:202</i>
		 */
		public static final int AV_PKT_DATA_H263_MB_INFO = 3;
		/**
		 * Recommmends skipping the specified number of samples<br>
		 * @code<br>
		 * u32le number of samples to skip from start of this packet<br>
		 * u32le number of samples to skip from end of this packet<br>
		 * u8    reason for start skip<br>
		 * u8    reason for end   skip (0=padding silence, 1=convergence)<br>
		 * @endcode<br>
		 * <i>native declaration : libavcodec/avcodec.h:212</i>
		 */
		public static final int AV_PKT_DATA_SKIP_SAMPLES = 70;
		/**
		 * An AV_PKT_DATA_JP_DUALMONO side data packet indicates that<br>
		 * the packet may contain "dual mono" audio specific to Japanese DTV<br>
		 * and if it is true, recommends only the selected channel to be used.<br>
		 * @code<br>
		 * u8    selected channels (0=mail/left, 1=sub/right, 2=both)<br>
		 * @endcode<br>
		 * <i>native declaration : libavcodec/avcodec.h:221</i>
		 */
		public static final int AV_PKT_DATA_JP_DUALMONO = 71;
		/**
		 * A list of zero terminated key/value strings. There is no end marker for<br>
		 * the list, so it is required to rely on the side data size to stop.<br>
		 * <i>native declaration : libavcodec/avcodec.h:226</i>
		 */
		public static final int AV_PKT_DATA_STRINGS_METADATA = 72;
		/**
		 * Subtitle event position<br>
		 * @code<br>
		 * u32le x1<br>
		 * u32le y1<br>
		 * u32le x2<br>
		 * u32le y2<br>
		 * @endcode<br>
		 * <i>native declaration : libavcodec/avcodec.h:236</i>
		 */
		public static final int AV_PKT_DATA_SUBTITLE_POSITION = 73;
		/**
		 * Data found in BlockAdditional element of matroska container. There is<br>
		 * no end marker for the data, so it is required to rely on the side data<br>
		 * size to recognize the end. 8 byte id (as found in BlockAddId) followed<br>
		 * by data.<br>
		 * <i>native declaration : libavcodec/avcodec.h:243</i>
		 */
		public static final int AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL = 74;
		/**
		 * The optional first identifier line of a WebVTT cue.<br>
		 * <i>native declaration : libavcodec/avcodec.h:245</i>
		 */
		public static final int AV_PKT_DATA_WEBVTT_IDENTIFIER = 75;
		/**
		 * The optional settings (rendering instructions) that immediately<br>
		 * follow the timestamp specifier of a WebVTT cue.<br>
		 * <i>native declaration : libavcodec/avcodec.h:250</i>
		 */
		public static final int AV_PKT_DATA_WEBVTT_SETTINGS = 76;
	};
	/**
	 * <i>native declaration : libavcodec/avcodec.h:344</i><br>
	 * enum values
	 */
	public static interface AVSideDataParamChangeFlags {
		/** <i>native declaration : libavcodec/avcodec.h:340</i> */
		public static final int AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT = 0x0001;
		/** <i>native declaration : libavcodec/avcodec.h:341</i> */
		public static final int AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT = 0x0002;
		/** <i>native declaration : libavcodec/avcodec.h:342</i> */
		public static final int AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE = 0x0004;
		/** <i>native declaration : libavcodec/avcodec.h:343</i> */
		public static final int AV_SIDE_DATA_PARAM_CHANGE_DIMENSIONS = 0x0008;
	};
	/**
	 * <i>native declaration : libavcodec/avcodec.h:357</i><br>
	 * enum values
	 */
	public static interface AVFieldOrder {
		/** <i>native declaration : libavcodec/avcodec.h:347</i> */
		public static final int AV_FIELD_UNKNOWN = 0;
		/** <i>native declaration : libavcodec/avcodec.h:348</i> */
		public static final int AV_FIELD_PROGRESSIVE = 1;
		/**
		 * < Top coded_first, top displayed first<br>
		 * <i>native declaration : libavcodec/avcodec.h:350</i>
		 */
		public static final int AV_FIELD_TT = 2;
		/**
		 * < Bottom coded first, bottom displayed first<br>
		 * <i>native declaration : libavcodec/avcodec.h:352</i>
		 */
		public static final int AV_FIELD_BB = 3;
		/**
		 * < Top coded first, bottom displayed first<br>
		 * <i>native declaration : libavcodec/avcodec.h:354</i>
		 */
		public static final int AV_FIELD_TB = 4;
		/**
		 * < Bottom coded first, top displayed first<br>
		 * <i>native declaration : libavcodec/avcodec.h:356</i>
		 */
		public static final int AV_FIELD_BT = 5;
	};
	/**
	 * <i>native declaration : libavcodec/avcodec.h:1870</i><br>
	 * enum values
	 */
	public static interface AVSubtitleType {
		/** <i>native declaration : libavcodec/avcodec.h:1857</i> */
		public static final int SUBTITLE_NONE = 0;
		/**
		 * < A bitmap, pict will be set<br>
		 * <i>native declaration : libavcodec/avcodec.h:1859</i>
		 */
		public static final int SUBTITLE_BITMAP = 1;
		/**
		 * Plain text, the text field must be set by the decoder and is<br>
		 * authoritative. ass and pict fields may contain approximations.<br>
		 * <i>native declaration : libavcodec/avcodec.h:1864</i>
		 */
		public static final int SUBTITLE_TEXT = 2;
		/**
		 * Formatted text, the ass field must be set by the decoder and is<br>
		 * authoritative. pict and text fields may contain approximations.<br>
		 * <i>native declaration : libavcodec/avcodec.h:1869</i>
		 */
		public static final int SUBTITLE_ASS = 3;
	};
	/**
	 * <i>native declaration : libavcodec/avcodec.h:2450</i><br>
	 * enum values
	 */
	public static interface AVPictureStructure {
		/**
		 * < unknown<br>
		 * <i>native declaration : libavcodec/avcodec.h:2443</i>
		 */
		public static final int AV_PICTURE_STRUCTURE_UNKNOWN = 0;
		/**
		 * < coded as top field<br>
		 * <i>native declaration : libavcodec/avcodec.h:2445</i>
		 */
		public static final int AV_PICTURE_STRUCTURE_TOP_FIELD = 1;
		/**
		 * < coded as bottom field<br>
		 * <i>native declaration : libavcodec/avcodec.h:2447</i>
		 */
		public static final int AV_PICTURE_STRUCTURE_BOTTOM_FIELD = 2;
		/**
		 * < coded as frame<br>
		 * <i>native declaration : libavcodec/avcodec.h:2449</i>
		 */
		public static final int AV_PICTURE_STRUCTURE_FRAME = 3;
	};
	/**
	 * Lock operation used by lockmgr<br>
	 * <i>native declaration : libavcodec/avcodec.h:3150</i><br>
	 * enum values
	 */
	public static interface AVLockOp {
		/**
		 * < Create a mutex<br>
		 * <i>native declaration : libavcodec/avcodec.h:3143</i>
		 */
		public static final int AV_LOCK_CREATE = 0;
		/**
		 * < Lock the mutex<br>
		 * <i>native declaration : libavcodec/avcodec.h:3145</i>
		 */
		public static final int AV_LOCK_OBTAIN = 1;
		/**
		 * < Unlock the mutex<br>
		 * <i>native declaration : libavcodec/avcodec.h:3147</i>
		 */
		public static final int AV_LOCK_RELEASE = 2;
		/**
		 * < Free mutex resources<br>
		 * <i>native declaration : libavcodec/avcodec.h:3149</i>
		 */
		public static final int AV_LOCK_DESTROY = 3;
	};
	/**
	 * Conversion Error : a.num<br>
	 * SKIPPED:<br>
	 * <i>native declaration : libavutil/rational.h:0</i><br>
	 * const int64_t tmp = a.num * (int64_t)b.den - b.num * (int64_t)a.den;
	 */
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_CLOSED_GOP = (int)0x80000000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_IDCT_ALTIVEC = (int)8;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_VC1_MAIN = (int)1;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_MPEG2_SS = (int)2;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DEBUG_BUFFERS = (int)0x00008000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_BUG_AMV = (int)32;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int AV_EF_EXPLODE = (int)(1 << 3);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_GRAY = (int)0x2000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_16x8 = (int)0x0010;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_MB_DECISION_BITS = (int)1;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_EMU_EDGE = (int)0x4000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_MB_DECISION_SIMPLE = (int)0;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_MPEG4_CORE_SCALABLE = (int)10;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_UNALIGNED = (int)0x0001;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG2_IGNORE_CROP = (int)0x00010000;
	/** <i>native declaration : libavcodec/version.h</i> */
	public static final boolean FF_API_LOWRES = (boolean)(55 < 56);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DTG_AFD_16_9_SP_14_9 = (int)14;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_P0L1 = (int)0x4000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_H264_HIGH = (int)100;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG2_SHOW_ALL = (int)0x00400000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int SLICE_FLAG_ALLOW_PLANE = (int)0x0004;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_DTS_HD_HRA = (int)50;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_LOSS_RESOLUTION = (int)0x0001;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_CMP_PSNR = (int)4;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int AV_CODEC_PROP_LOSSY = (int)(1 << 1);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_MPEG4_SIMPLE_STUDIO = (int)14;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DTG_AFD_14_9 = (int)11;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_BITEXACT = (int)0x00800000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_LOSS_CHROMA = (int)0x0020;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_DTS_ES = (int)30;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_IDCT_INT = (int)1;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_THREAD_FRAME = (int)1;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_CHANNEL_CONF = (int)0x0400;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_LOW_DELAY = (int)0x00080000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_P0L0 = (int)0x1000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int AV_EF_AGGRESSIVE = (int)(1 << 18);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_DTS_96_24 = (int)40;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_INTERLACED_ME = (int)0x20000000;
	/** <i>native declaration : libavcodec/version.h</i> */
	public static final boolean FF_API_OLD_DECODE_AUDIO = (boolean)(55 < 56);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_LOSS_DEPTH = (int)0x0002;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DEBUG_QP = (int)16;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_QSCALE_TYPE_MPEG1 = (int)0;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_QSCALE_TYPE_MPEG2 = (int)1;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_IDCT_ARM = (int)7;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DEBUG_RC = (int)2;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_IDCT_IPP = (int)13;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_IDCT_XVIDMMX = (int)14;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_QUANT = (int)0x00010000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int AV_EF_BITSTREAM = (int)(1 << 1);
	/** <i>native declaration : libavcodec/version.h</i> */
	public static final boolean FF_API_OLD_ENCODE_VIDEO = (boolean)(55 < 56);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_CMP_RD = (int)6;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_MPEG2_SNR_SCALABLE = (int)3;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_DRAW_HORIZ_BAND = (int)0x0001;
	/** <i>native declaration : libavcodec/version.h</i> */
	public static final boolean FF_API_DEINTERLACE = (boolean)(55 < 56);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_BUG_TRUNCATED = (int)16384;
	/**
	 * define<br>
	 * Conversion Error : 55.29.<br>
	 * SKIPPED:<br>
	 * <i>native declaration : libavcodec/version.h:0</i><br>
	 * 55.29.
	 */
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_BUG_XVID_ILACE = (int)4;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DEBUG_THREADS = (int)0x00010000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_H264_HIGH_444_PREDICTIVE = (int)244;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DCT_AUTO = (int)0;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_RC_STRATEGY_XVID = (int)1;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_INTRA4x4 = (int)0x0001;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_CODER_TYPE_DEFLATE = (int)4;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_AAC_LTP = (int)3;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_IDCT_SIMPLEVIS = (int)18;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_LOSSLESS = (int)0x80000000;
	/** <i>native declaration : libavcodec/version.h</i> */
	public static final boolean FF_API_CODEC_ID = (boolean)(55 < 56);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_NEG_LINESIZES = (int)0x0800;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int AV_EF_BUFFER = (int)(1 << 2);
	/** <i>native declaration : libavcodec/version.h</i> */
	public static final boolean FF_API_AVCODEC_RESAMPLE = (boolean)(55 < 56);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int AV_PARSER_PTS_NB = (int)4;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_LOSS_ALPHA = (int)0x0008;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_MPEG2_MAIN = (int)4;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int AV_CODEC_PROP_LOSSLESS = (int)(1 << 2);
	/** <i>native declaration : libavcodec/version.h</i> */
	public static final boolean FF_API_CAP_VDPAU = (boolean)(55 < 56);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_AAC_LOW = (int)1;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_AUTO_THREADS = (int)0x8000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_SUBFRAMES = (int)0x0100;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_EXPERIMENTAL = (int)0x0200;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DEBUG_VIS_MV_B_BACK = (int)0x00000004;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_ASPECT_EXTENDED = (int)15;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_MB_DECISION_RD = (int)2;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_CMP_W97 = (int)12;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_AAC_LD = (int)22;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_IDCT_SIMPLEARMV6 = (int)17;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_CODER_TYPE_AC = (int)1;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_MPEG4_CORE = (int)2;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int AV_CODEC_PROP_TEXT_SUB = (int)(1 << 17);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_VC1_ADVANCED = (int)3;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_DR1 = (int)0x0002;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_BUG_QPEL_CHROMA = (int)64;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int PARSER_FLAG_FETCHED_OFFSET = (int)0x0004;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_CMP_W53 = (int)11;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_AAC_HE = (int)4;
	/** <i>native declaration : libavcodec/version.h</i> */
	public static final boolean FF_API_VOXWARE = (boolean)(55 < 56);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_BUG_STD_QPEL = (int)128;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_MPEG4_BASIC_ANIMATED_TEXTURE = (int)7;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int AV_CODEC_PROP_INTRA_ONLY = (int)(1 << 0);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_L0L1 = (int)((0x1000 | 0x2000) | (0x4000 | 0x8000));
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_INTRA16x16 = (int)0x0002;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_RESERVED = (int)-100;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DTG_AFD_SAME = (int)8;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_BUFFER_TYPE_USER = (int)2;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int AV_PKT_FLAG_CORRUPT = (int)0x0002;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_IDCT_SIMPLEALPHA = (int)23;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_QSCALE = (int)0x0002;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_MPEG4_SIMPLE_SCALABLE = (int)1;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_ACPRED = (int)0x0200;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_H264_INTRA = (int)(1 << 11);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_BUFFER_TYPE_COPY = (int)8;
	/** <i>native declaration : libavcodec/version.h</i> */
	public static final boolean FF_API_AVCODEC_OPEN = (boolean)(55 < 55);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_INPUT_PRESERVED = (int)0x0100;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_COMPRESSION_DEFAULT = (int)-1;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_H264_EXTENDED = (int)88;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_COMPLIANCE_NORMAL = (int)0;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_HWACCEL = (int)0x0010;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_MPEG4_SCALABLE_TEXTURE = (int)5;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_VC1_COMPLEX = (int)2;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_CMP_DCT = (int)3;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_IDCT_SIMPLEARM = (int)10;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_MPEG4_SIMPLE = (int)0;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_GLOBAL_HEADER = (int)0x00400000;
	/** <i>native declaration : libavcodec/version.h</i> */
	public static final int LIBAVCODEC_VERSION_MAJOR = (int)55;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_SMALL_LAST_FRAME = (int)0x0040;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int AV_SUBTITLE_FLAG_FORCED = (int)0x00000001;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_H264_HIGH_10_INTRA = (int)(110 | (1 << 11));
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_LOSS_COLORSPACE = (int)0x0004;
	/** <i>native declaration : libavcodec/version.h</i> */
	public static final boolean FF_API_GET_BUFFER = (boolean)(55 < 56);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DTG_AFD_4_3_SP_14_9 = (int)13;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DCT_ALTIVEC = (int)5;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_BUG_AC_VLC = (int)0;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int AV_CODEC_PROP_BITMAP_SUB = (int)(1 << 16);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_BUG_NO_PADDING = (int)16;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_CMP_DCTMAX = (int)13;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_IDCT_SIMPLE = (int)2;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_UNKNOWN = (int)-99;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_SLICE_THREADS = (int)0x2000;
	/** <i>native declaration : libavcodec/version.h</i> */
	public static final boolean FF_API_ALLOC_CONTEXT = (boolean)(55 < 55);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_MPEG4_ADVANCED_CORE = (int)12;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_INTRA_PCM = (int)0x0004;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_CMP_ZERO = (int)7;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_H264_CONSTRAINED = (int)(1 << 9);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_GMC = (int)0x0020;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_BUG_DIRECT_BLOCKSIZE = (int)512;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int PARSER_FLAG_USE_CODEC_TS = (int)0x1000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_EC_GUESS_MVS = (int)1;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_AAC_ELD = (int)38;
	/** <i>native declaration : libavcodec/version.h</i> */
	public static final int LIBAVCODEC_VERSION_MICRO = (int)100;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_CMP_CHROMA = (int)256;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_MPEG4_ADVANCED_REAL_TIME = (int)9;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DEBUG_BUGS = (int)0x00001000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DEBUG_ER = (int)0x00000400;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_SUB_CHARENC_MODE_PRE_DECODER = (int)1;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_CODER_TYPE_RLE = (int)3;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_CODER_TYPE_VLC = (int)0;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_BUG_QPEL_CHROMA2 = (int)256;
	/** <i>native declaration : libavcodec/version.h</i> */
	public static final int LIBAVCODEC_VERSION_INT = (int)(55 << 16 | 29 << 8 | 100);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_COMPLIANCE_VERY_STRICT = (int)2;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_BUFFER_TYPE_INTERNAL = (int)1;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_8x16 = (int)0x0020;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_H264_HIGH_444 = (int)144;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_TRUNCATED = (int)0x00010000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_CMP_SSE = (int)1;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DEBUG_STARTCODE = (int)0x00000100;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_BUFFER_HINTS_PRESERVE = (int)0x04;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_DTS = (int)20;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_H264_HIGH_444_INTRA = (int)(244 | (1 << 11));
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_H264_HIGH_422 = (int)122;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_INTRA_ONLY = (int)0x40000000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_LEVEL_UNKNOWN = (int)-99;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_FRAME_THREADS = (int)0x1000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG2_NO_OUTPUT = (int)0x00000004;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_IDCT_SH4 = (int)9;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_INPUT_BUFFER_PADDING_SIZE = (int)16;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DTG_AFD_16_9 = (int)10;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_VARIABLE_FRAME_SIZE = (int)0x10000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_IDCT_AUTO = (int)0;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_INTERLACED_DCT = (int)0x00040000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DEBUG_MV = (int)32;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_PASS2 = (int)0x0400;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_PASS1 = (int)0x0200;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int AV_EF_CAREFUL = (int)(1 << 16);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_DTS_HD_MA = (int)60;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_THREAD_SLICE = (int)2;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_IDCT_SIMPLEMMX = (int)3;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_MPEG4_ADVANCED_SCALABLE_TEXTURE = (int)13;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PRED_PLANE = (int)1;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DEBUG_VIS_MB_TYPE = (int)0x00004000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_CMP_VSSE = (int)9;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_IDCT_SIMPLEARMV5TE = (int)16;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_CMP_NSSE = (int)10;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DCT_MMX = (int)3;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int PARSER_FLAG_COMPLETE_FRAMES = (int)0x0001;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_MPEG2_422 = (int)0;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_MPEG2_AAC_HE = (int)131;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_CMP_SATD = (int)2;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DEBUG_DCT_COEFF = (int)0x00000040;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_CMP_SAD = (int)0;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_JPEG2000_DCINEMA_4K = (int)4;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_LOSS_COLORQUANT = (int)0x0010;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_CODER_TYPE_RAW = (int)2;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int SLICE_FLAG_ALLOW_FIELD = (int)0x0002;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_BUFFER_HINTS_REUSABLE = (int)0x08;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_JPEG2000_DCINEMA_2K = (int)3;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DEBUG_MB_TYPE = (int)8;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_MPEG4_HYBRID = (int)8;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_CBP = (int)0x00020000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_TRUNCATED = (int)0x0008;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_MPEG4_ADVANCED_SIMPLE = (int)15;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_QSCALE_TYPE_VP56 = (int)3;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_MPEG4_N_BIT = (int)4;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DEFAULT_QUANT_BIAS = (int)999999;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_0 = (int)0;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_JPEG2000_CSTREAM_RESTRICTION_1 = (int)1;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_H264_BASELINE = (int)66;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int AV_GET_BUFFER_FLAG_REF = (int)(1 << 0);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_GMC = (int)0x0400;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int PARSER_FLAG_ONCE = (int)0x0002;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_4MV = (int)0x0004;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG2_LOCAL_HEADER = (int)0x00000008;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_BUG_OLD_MSMPEG4 = (int)2;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DEBUG_PICT_INFO = (int)1;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DCT_INT = (int)2;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_IDCT_SIMPLENEON = (int)22;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_NORMALIZE_AQP = (int)0x00020000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_MPEG2_SIMPLE = (int)5;
	/** <i>native declaration : libavcodec/version.h</i> */
	public static final boolean FF_API_BUFS_VDPAU = (boolean)(55 < 56);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_MAX_B_FRAMES = (int)16;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_MPEG4_SIMPLE_FACE_ANIMATION = (int)6;
	/** <i>native declaration : libavcodec/version.h</i> */
	public static final int LIBAVCODEC_VERSION_MINOR = (int)29;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_MIN_BUFFER_SIZE = (int)16384;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_BUG_DC_CLIP = (int)4096;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_8x8 = (int)0x0040;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_H264_CAVLC_444 = (int)44;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int SLICE_FLAG_CODED_ORDER = (int)0x0001;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_P1L1 = (int)0x8000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_P1L0 = (int)0x2000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int AV_EF_COMPLIANT = (int)(1 << 17);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_VC1_SIMPLE = (int)0;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_H264_HIGH_10 = (int)110;
	/** <i>native declaration : libavcodec/version.h</i> */
	public static final String LIBAVCODEC_IDENT = (String)"Lavc";
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_MV0 = (int)0x0040;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_INTERLACED = (int)0x0080;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_MPEG4_ADVANCED_CODING = (int)11;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_COMPLIANCE_UNOFFICIAL = (int)-1;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DEBUG_VIS_MV_B_FOR = (int)0x00000002;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_SUB_CHARENC_MODE_AUTOMATIC = (int)0;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_H264_HIGH_422_INTRA = (int)(122 | (1 << 11));
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int AV_PKT_FLAG_KEY = (int)0x0001;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_MPEG2_AAC_LOW = (int)128;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DTG_AFD_SP_4_3 = (int)15;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DEBUG_MMCO = (int)0x00000800;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_COMPLIANCE_STRICT = (int)1;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_BUG_HPEL_CHROMA = (int)2048;
	/** <i>native declaration : libavcodec/version.h</i> */
	public static final boolean FF_API_OLD_TIMECODE = (boolean)(55 < 55);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DEBUG_VIS_QP = (int)0x00002000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DEBUG_BITSTREAM = (int)4;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_CMP_DCT264 = (int)14;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_EC_DEBLOCK = (int)2;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_16x16 = (int)0x0008;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_AAC_MAIN = (int)0;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_BUG_EDGE = (int)1024;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_HWACCEL_VDPAU = (int)0x0080;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG2_FAST = (int)0x00000001;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG2_CHUNKS = (int)0x00008000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_BUG_MS = (int)8192;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_AAC_HE_V2 = (int)28;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_IDCT_FAAN = (int)20;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_BUFFER_HINTS_VALID = (int)0x01;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_DIRECT2 = (int)0x0100;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PRED_LEFT = (int)0;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_MPEG2_HIGH = (int)1;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_BUFFER_HINTS_READABLE = (int)0x02;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_JPEG2000_CSTREAM_NO_RESTRICTION = (int)2;
	/** <i>native declaration : libavcodec/version.h</i> */
	public static final boolean FF_API_OLD_ENCODE_AUDIO = (boolean)(55 < 56);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_QPEL = (int)0x0010;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_L0 = (int)(0x1000 | 0x2000);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_L1 = (int)(0x4000 | 0x8000);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_H264_MAIN = (int)77;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_BUFFER_TYPE_SHARED = (int)4;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_DELAY = (int)0x0020;
	/** <i>native declaration : libavcodec/version.h</i> */
	public static final boolean FF_API_MISSING_SAMPLE = (boolean)(55 < 56);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_BUG_AUTODETECT = (int)1;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_COMPLIANCE_EXPERIMENTAL = (int)-2;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DEBUG_VIS_MV_P_FOR = (int)0x00000001;
	/** <i>native declaration : libavcodec/version.h</i> */
	public static final int LIBAVCODEC_BUILD = (int)(55 << 16 | 29 << 8 | 100);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_SUB_CHARENC_MODE_DO_NOTHING = (int)-1;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_MPEG4_MAIN = (int)3;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_AAC_SSR = (int)2;
	/** <i>native declaration : libavcodec/version.h</i> */
	public static final boolean FF_API_DESTRUCT_PACKET = (boolean)(55 < 56);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_PSNR = (int)0x8000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int MB_TYPE_SKIP = (int)0x0800;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int AV_EF_CRCCHECK = (int)(1 << 0);
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DCT_FAAN = (int)6;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_QSCALE_TYPE_H264 = (int)2;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DEBUG_SKIP = (int)0x00000080;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PROFILE_H264_CONSTRAINED_BASELINE = (int)(66 | (1 << 9));
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_CMP_BIT = (int)5;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DEBUG_PTS = (int)0x00000200;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DTG_AFD_4_3 = (int)9;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_LOOP_FILTER = (int)0x00000800;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_CMP_VSAD = (int)8;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_CAP_PARAM_CHANGE = (int)0x4000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG2_DROP_FRAME_TIMECODE = (int)0x00002000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_DCT_FASTINT = (int)1;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int CODEC_FLAG_AC_PRED = (int)0x01000000;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_BUG_UMP4 = (int)8;
	/** <i>native declaration : libavcodec/avcodec.h</i> */
	public static final int FF_PRED_MEDIAN = (int)2;
	/** <i>native declaration : libavcodec/version.h</i> */
	public static final boolean FF_API_REQUEST_CHANNELS = (boolean)(55 < 56);
	/** <i>native declaration : libavcodec/avcodec.h:3278</i> */
	public interface avcodec_default_execute_func_callback extends Callback {
		int apply(AVCodecContext c2, Pointer arg2);
	};
	/** <i>native declaration : libavcodec/avcodec.h:3279</i> */
	public interface avcodec_default_execute2_func_callback extends Callback {
		int apply(AVCodecContext c2, Pointer arg2, int int1, int int2);
	};
	/** <i>native declaration : libavcodec/avcodec.h:3292</i> */
	public interface av_lockmgr_register_cb_callback extends Callback {
		int apply(PointerByReference mutex, int op);
	};
	/**
	 * Original signature : <code>AVRational av_codec_get_pkt_timebase(const AVCodecContext*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:1650</i>
	 */
	ByValue av_codec_get_pkt_timebase(AVCodecContext avctx);
	/**
	 * Original signature : <code>void av_codec_set_pkt_timebase(AVCodecContext*, AVRational)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:1652</i>
	 */
	void av_codec_set_pkt_timebase(AVCodecContext avctx, ByValue val);
	/**
	 * Original signature : <code>AVCodecDescriptor* av_codec_get_codec_descriptor(const AVCodecContext*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:1654</i>
	 */
	AVCodecDescriptor av_codec_get_codec_descriptor(AVCodecContext avctx);
	/**
	 * Original signature : <code>void av_codec_set_codec_descriptor(AVCodecContext*, const AVCodecDescriptor*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:1656</i>
	 */
	void av_codec_set_codec_descriptor(AVCodecContext avctx, AVCodecDescriptor desc);
	/**
	 * Original signature : <code>int av_codec_get_lowres(const AVCodecContext*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:1658</i>
	 */
	int av_codec_get_lowres(AVCodecContext avctx);
	/**
	 * Original signature : <code>void av_codec_set_lowres(AVCodecContext*, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:1660</i>
	 */
	void av_codec_set_lowres(AVCodecContext avctx, int val);
	/**
	 * If c is NULL, returns the first registered codec,<br>
	 * if c is non-NULL, returns the next registered codec after c,<br>
	 * or NULL if c is the last one.<br>
	 * Original signature : <code>AVCodec* av_codec_next(const AVCodec*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:1915</i>
	 */
	AVCodec av_codec_next(AVCodec c);
	/**
	 * Return the LIBAVCODEC_VERSION_INT constant.<br>
	 * Original signature : <code>int avcodec_version()</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:1920</i>
	 */
	int avcodec_version();
	/**
	 * Return the libavcodec build-time configuration.<br>
	 * Original signature : <code>char* avcodec_configuration()</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:1925</i>
	 */
	String avcodec_configuration();
	/**
	 * Return the libavcodec license.<br>
	 * Original signature : <code>char* avcodec_license()</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:1930</i>
	 */
	String avcodec_license();
	/**
	 * Register the codec codec and initialize libavcodec.<br>
	 * * @warning either this function or avcodec_register_all() must be called<br>
	 * before any other libavcodec functions.<br>
	 * * @see avcodec_register_all()<br>
	 * Original signature : <code>void avcodec_register(AVCodec*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:1938</i>
	 */
	void avcodec_register(AVCodec codec);
	/**
	 * Register all the codecs, parsers and bitstream filters which were enabled at<br>
	 * configuration time. If you do not call this function you can select exactly<br>
	 * which formats you want to support, by using the individual registration<br>
	 * functions.<br>
	 * * @see avcodec_register<br>
	 * @see av_register_codec_parser<br>
	 * @see av_register_bitstream_filter<br>
	 * Original signature : <code>void avcodec_register_all()</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:1949</i>
	 */
	void avcodec_register_all();
	/**
	 * Allocate an AVCodecContext and set its fields to default values.  The<br>
	 * resulting struct can be deallocated by calling avcodec_close() on it followed<br>
	 * by av_free().<br>
	 * * @param codec if non-NULL, allocate private data and initialize defaults<br>
	 *              for the given codec. It is illegal to then call avcodec_open2()<br>
	 *              with a different codec.<br>
	 *              If NULL, then the codec-specific defaults won't be initialized,<br>
	 *              which may result in suboptimal default settings (this is<br>
	 *              important mainly for encoders, e.g. libx264).<br>
	 * * @return An AVCodecContext filled with default values or NULL on failure.<br>
	 * @see avcodec_get_context_defaults<br>
	 * Original signature : <code>AVCodecContext* avcodec_alloc_context3(const AVCodec*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:1964</i>
	 */
	AVCodecContext avcodec_alloc_context3(AVCodec codec);
	/**
	 * Set the fields of the given AVCodecContext to default values corresponding<br>
	 * to the given codec (defaults may be codec-dependent).<br>
	 * * Do not call this function if a non-NULL codec has been passed<br>
	 * to avcodec_alloc_context3() that allocated this AVCodecContext.<br>
	 * If codec is non-NULL, it is illegal to call avcodec_open2() with a<br>
	 * different codec on this AVCodecContext.<br>
	 * Original signature : <code>int avcodec_get_context_defaults3(AVCodecContext*, const AVCodec*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:1974</i>
	 */
	int avcodec_get_context_defaults3(AVCodecContext s, AVCodec codec);
	/**
	 * Get the AVClass for AVCodecContext. It can be used in combination with<br>
	 * AV_OPT_SEARCH_FAKE_OBJ for examining options.<br>
	 * * @see av_opt_find().<br>
	 * Original signature : <code>AVClass* avcodec_get_class()</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:1981</i>
	 */
	AVClass avcodec_get_class();
	/**
	 * Get the AVClass for AVFrame. It can be used in combination with<br>
	 * AV_OPT_SEARCH_FAKE_OBJ for examining options.<br>
	 * * @see av_opt_find().<br>
	 * Original signature : <code>AVClass* avcodec_get_frame_class()</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:1988</i>
	 */
	AVClass avcodec_get_frame_class();
	/**
	 * Get the AVClass for AVSubtitleRect. It can be used in combination with<br>
	 * AV_OPT_SEARCH_FAKE_OBJ for examining options.<br>
	 * * @see av_opt_find().<br>
	 * Original signature : <code>AVClass* avcodec_get_subtitle_rect_class()</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:1995</i>
	 */
	AVClass avcodec_get_subtitle_rect_class();
	/**
	 * Copy the settings of the source AVCodecContext into the destination<br>
	 * AVCodecContext. The resulting destination codec context will be<br>
	 * unopened, i.e. you are required to call avcodec_open2() before you<br>
	 * can use this AVCodecContext to decode/encode video/audio data.<br>
	 * * @param dest target codec context, should be initialized with<br>
	 *             avcodec_alloc_context3(NULL), but otherwise uninitialized<br>
	 * @param src source codec context<br>
	 * @return AVERROR() on error (e.g. memory allocation error), 0 on success<br>
	 * Original signature : <code>int avcodec_copy_context(AVCodecContext*, const AVCodecContext*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2007</i>
	 */
	int avcodec_copy_context(AVCodecContext dest, AVCodecContext src);
	/**
	 * Allocate an AVFrame and set its fields to default values.  The resulting<br>
	 * struct must be freed using avcodec_free_frame().<br>
	 * * @return An AVFrame filled with default values or NULL on failure.<br>
	 * @see avcodec_get_frame_defaults<br>
	 * Original signature : <code>AVFrame* avcodec_alloc_frame()</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2015</i>
	 */
	AVFrame avcodec_alloc_frame();
	/**
	 * Set the fields of the given AVFrame to default values.<br>
	 * * @param frame The AVFrame of which the fields should be set to default values.<br>
	 * Original signature : <code>void avcodec_get_frame_defaults(AVFrame*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2021</i>
	 */
	void avcodec_get_frame_defaults(AVFrame frame);
	/**
	 * Free the frame and any dynamically allocated objects in it,<br>
	 * e.g. extended_data.<br>
	 * * @param frame frame to be freed. The pointer will be set to NULL.<br>
	 * * @warning this function does NOT free the data buffers themselves<br>
	 * (it does not know how, since they might have been allocated with<br>
	 *  a custom get_buffer()).<br>
	 * Original signature : <code>void avcodec_free_frame(AVFrame**)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2031</i><br>
	 * @deprecated use the safer method {@link #avcodec_free_frame(wrapffmpeg.AVFrame.ByReference[])} instead
	 */
	@Deprecated 
	void avcodec_free_frame(PointerByReference frame);
	/**
	 * Free the frame and any dynamically allocated objects in it,<br>
	 * e.g. extended_data.<br>
	 * * @param frame frame to be freed. The pointer will be set to NULL.<br>
	 * * @warning this function does NOT free the data buffers themselves<br>
	 * (it does not know how, since they might have been allocated with<br>
	 *  a custom get_buffer()).<br>
	 * Original signature : <code>void avcodec_free_frame(AVFrame**)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2031</i>
	 */
	void avcodec_free_frame(AVFrame.ByReference frame[]);
	/**
	 * Initialize the AVCodecContext to use the given AVCodec. Prior to using this<br>
	 * function the context has to be allocated with avcodec_alloc_context3().<br>
	 * * The functions avcodec_find_decoder_by_name(), avcodec_find_encoder_by_name(),<br>
	 * avcodec_find_decoder() and avcodec_find_encoder() provide an easy way for<br>
	 * retrieving a codec.<br>
	 * * @warning This function is not thread safe!<br>
	 * * @code<br>
	 * avcodec_register_all();<br>
	 * av_dict_set(&opts, "b", "2.5M", 0);<br>
	 * codec = avcodec_find_decoder(AV_CODEC_ID_H264);<br>
	 * if (!codec)<br>
	 *     exit(1);<br>
	 * * context = avcodec_alloc_context3(codec);<br>
	 * * if (avcodec_open2(context, codec, opts) < 0)<br>
	 *     exit(1);<br>
	 * @endcode<br>
	 * * @param avctx The context to initialize.<br>
	 * @param codec The codec to open this context for. If a non-NULL codec has been<br>
	 *              previously passed to avcodec_alloc_context3() or<br>
	 *              avcodec_get_context_defaults3() for this context, then this<br>
	 *              parameter MUST be either NULL or equal to the previously passed<br>
	 *              codec.<br>
	 * @param options A dictionary filled with AVCodecContext and codec-private options.<br>
	 *                On return this object will be filled with options that were not found.<br>
	 * * @return zero on success, a negative value on error<br>
	 * @see avcodec_alloc_context3(), avcodec_find_decoder(), avcodec_find_encoder(),<br>
	 *      av_dict_set(), av_opt_find().<br>
	 * Original signature : <code>int avcodec_open2(AVCodecContext*, const AVCodec*, AVDictionary**)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2062</i>
	 */
	int avcodec_open2(AVCodecContext avctx, AVCodec codec, PointerByReference options);
	/**
	 * Close a given AVCodecContext and free all the data associated with it<br>
	 * (but not the AVCodecContext itself).<br>
	 * * Calling this function on an AVCodecContext that hasn't been opened will free<br>
	 * the codec-specific data allocated in avcodec_alloc_context3() /<br>
	 * avcodec_get_context_defaults3() with a non-NULL codec. Subsequent calls will<br>
	 * do nothing.<br>
	 * Original signature : <code>int avcodec_close(AVCodecContext*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2072</i>
	 */
	int avcodec_close(AVCodecContext avctx);
	/**
	 * Free all allocated data in the given subtitle struct.<br>
	 * * @param sub AVSubtitle to free.<br>
	 * Original signature : <code>void avsubtitle_free(AVSubtitle*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2078</i>
	 */
	void avsubtitle_free(AVSubtitle sub);
	/**
	 * Original signature : <code>void av_destruct_packet(AVPacket*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2080</i>
	 */
	void av_destruct_packet(AVPacket pkt);
	/**
	 * Initialize optional fields of a packet with default values.<br>
	 * * Note, this does not touch the data and size members, which have to be<br>
	 * initialized separately.<br>
	 * * @param pkt packet<br>
	 * Original signature : <code>void av_init_packet(AVPacket*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2088</i>
	 */
	void av_init_packet(AVPacket pkt);
	/**
	 * Allocate the payload of a packet and initialize its fields with<br>
	 * default values.<br>
	 * * @param pkt packet<br>
	 * @param size wanted payload size<br>
	 * @return 0 if OK, AVERROR_xxx otherwise<br>
	 * Original signature : <code>int av_new_packet(AVPacket*, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2097</i>
	 */
	int av_new_packet(AVPacket pkt, int size);
	/**
	 * Reduce packet size, correctly zeroing padding<br>
	 * * @param pkt packet<br>
	 * @param size new size<br>
	 * Original signature : <code>void av_shrink_packet(AVPacket*, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2104</i>
	 */
	void av_shrink_packet(AVPacket pkt, int size);
	/**
	 * Increase packet size, correctly zeroing padding<br>
	 * * @param pkt packet<br>
	 * @param grow_by number of bytes by which to increase the size of the packet<br>
	 * Original signature : <code>int av_grow_packet(AVPacket*, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2111</i>
	 */
	int av_grow_packet(AVPacket pkt, int grow_by);
	/**
	 * Initialize a reference-counted packet from av_malloc()ed data.<br>
	 * * @param pkt packet to be initialized. This function will set the data, size,<br>
	 *        buf and destruct fields, all others are left untouched.<br>
	 * @param data Data allocated by av_malloc() to be used as packet data. If this<br>
	 *        function returns successfully, the data is owned by the underlying AVBuffer.<br>
	 *        The caller may not access the data through other means.<br>
	 * @param size size of data in bytes, without the padding. I.e. the full buffer<br>
	 *        size is assumed to be size + FF_INPUT_BUFFER_PADDING_SIZE.<br>
	 * * @return 0 on success, a negative AVERROR on error<br>
	 * Original signature : <code>int av_packet_from_data(AVPacket*, uint8_t*, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2124</i><br>
	 * @deprecated use the safer methods {@link #av_packet_from_data(wrapffmpeg.AVPacket, java.nio.ByteBuffer, int)} and {@link #av_packet_from_data(wrapffmpeg.AVPacket, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int av_packet_from_data(AVPacket pkt, Pointer data, int size);
	/**
	 * Initialize a reference-counted packet from av_malloc()ed data.<br>
	 * * @param pkt packet to be initialized. This function will set the data, size,<br>
	 *        buf and destruct fields, all others are left untouched.<br>
	 * @param data Data allocated by av_malloc() to be used as packet data. If this<br>
	 *        function returns successfully, the data is owned by the underlying AVBuffer.<br>
	 *        The caller may not access the data through other means.<br>
	 * @param size size of data in bytes, without the padding. I.e. the full buffer<br>
	 *        size is assumed to be size + FF_INPUT_BUFFER_PADDING_SIZE.<br>
	 * * @return 0 on success, a negative AVERROR on error<br>
	 * Original signature : <code>int av_packet_from_data(AVPacket*, uint8_t*, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2124</i>
	 */
	int av_packet_from_data(AVPacket pkt, ByteBuffer data, int size);
	/**
	 * @warning This is a hack - the packet memory allocation stuff is broken. The<br>
	 * packet is allocated if it was not really allocated.<br>
	 * Original signature : <code>int av_dup_packet(AVPacket*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2130</i>
	 */
	int av_dup_packet(AVPacket pkt);
	/**
	 * Copy packet, including contents<br>
	 * * @return 0 on success, negative AVERROR on fail<br>
	 * Original signature : <code>int av_copy_packet(AVPacket*, AVPacket*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2136</i>
	 */
	int av_copy_packet(AVPacket dst, AVPacket src);
	/**
	 * Copy packet side data<br>
	 * * @return 0 on success, negative AVERROR on fail<br>
	 * Original signature : <code>int av_copy_packet_side_data(AVPacket*, AVPacket*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2142</i>
	 */
	int av_copy_packet_side_data(AVPacket dst, AVPacket src);
	/**
	 * Free a packet.<br>
	 * * @param pkt packet to free<br>
	 * Original signature : <code>void av_free_packet(AVPacket*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2148</i>
	 */
	void av_free_packet(AVPacket pkt);
	/**
	 * Allocate new information of a packet.<br>
	 * * @param pkt packet<br>
	 * @param type side information type<br>
	 * @param size side information size<br>
	 * @return pointer to fresh allocated data or NULL otherwise<br>
	 * Original signature : <code>uint8_t* av_packet_new_side_data(AVPacket*, AVPacketSideDataType, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2157</i>
	 */
	Pointer av_packet_new_side_data(AVPacket pkt, int type, int size);
	/**
	 * Shrink the already allocated side data buffer<br>
	 * * @param pkt packet<br>
	 * @param type side information type<br>
	 * @param size new side information size<br>
	 * @return 0 on success, < 0 on failure<br>
	 * Original signature : <code>int av_packet_shrink_side_data(AVPacket*, AVPacketSideDataType, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2166</i>
	 */
	int av_packet_shrink_side_data(AVPacket pkt, int type, int size);
	/**
	 * Get side information from packet.<br>
	 * * @param pkt packet<br>
	 * @param type desired side information type<br>
	 * @param size pointer for side information size to store (optional)<br>
	 * @return pointer to data if present or NULL otherwise<br>
	 * Original signature : <code>uint8_t* av_packet_get_side_data(AVPacket*, AVPacketSideDataType, int*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2175</i><br>
	 * @deprecated use the safer methods {@link #av_packet_get_side_data(wrapffmpeg.AVPacket, int, java.nio.IntBuffer)} and {@link #av_packet_get_side_data(wrapffmpeg.AVPacket, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	Pointer av_packet_get_side_data(AVPacket pkt, int type, IntByReference size);
	/**
	 * Get side information from packet.<br>
	 * * @param pkt packet<br>
	 * @param type desired side information type<br>
	 * @param size pointer for side information size to store (optional)<br>
	 * @return pointer to data if present or NULL otherwise<br>
	 * Original signature : <code>uint8_t* av_packet_get_side_data(AVPacket*, AVPacketSideDataType, int*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2175</i>
	 */
	Pointer av_packet_get_side_data(AVPacket pkt, int type, IntBuffer size);
	/**
	 * Original signature : <code>int av_packet_merge_side_data(AVPacket*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2177</i>
	 */
	int av_packet_merge_side_data(AVPacket pkt);
	/**
	 * Original signature : <code>int av_packet_split_side_data(AVPacket*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2179</i>
	 */
	int av_packet_split_side_data(AVPacket pkt);
	/**
	 * Convenience function to free all the side data stored.<br>
	 * All the other fields stay untouched.<br>
	 * * @param pkt packet<br>
	 * Original signature : <code>void av_packet_free_side_data(AVPacket*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2186</i>
	 */
	void av_packet_free_side_data(AVPacket pkt);
	/**
	 * Setup a new reference to the data described by a given packet<br>
	 * * If src is reference-counted, setup dst as a new reference to the<br>
	 * buffer in src. Otherwise allocate a new buffer in dst and copy the<br>
	 * data from src into it.<br>
	 * * All the other fields are copied from src.<br>
	 * * @see av_packet_unref<br>
	 * * @param dst Destination packet<br>
	 * @param src Source packet<br>
	 * * @return 0 on success, a negative AVERROR on error.<br>
	 * Original signature : <code>int av_packet_ref(AVPacket*, AVPacket*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2199</i>
	 */
	int av_packet_ref(AVPacket dst, AVPacket src);
	/**
	 * Wipe the packet.<br>
	 * * Unreference the buffer referenced by the packet and reset the<br>
	 * remaining packet fields to their default values.<br>
	 * * @param pkt The packet to be unreferenced.<br>
	 * Original signature : <code>void av_packet_unref(AVPacket*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2207</i>
	 */
	void av_packet_unref(AVPacket pkt);
	/**
	 * Move every field in src to dst and reset src.<br>
	 * * @see av_packet_unref<br>
	 * * @param src Source packet, will be reset<br>
	 * @param dst Destination packet<br>
	 * Original signature : <code>void av_packet_move_ref(AVPacket*, AVPacket*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2215</i>
	 */
	void av_packet_move_ref(AVPacket dst, AVPacket src);
	/**
	 * Copy only "properties" fields from src to dst.<br>
	 * * Properties for the purpose of this function are all the fields<br>
	 * beside those related to the packet data (buf, data, size)<br>
	 * * @param dst Destination packet<br>
	 * @param src Source packet<br>
	 * * @return 0 on success AVERROR on failure.<br>
	 * Original signature : <code>int av_packet_copy_props(AVPacket*, const AVPacket*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2225</i>
	 */
	int av_packet_copy_props(AVPacket dst, AVPacket src);
	/**
	 * Find a registered decoder with a matching codec ID.<br>
	 * * @param id AVCodecID of the requested decoder<br>
	 * @return A decoder if one was found, NULL otherwise.<br>
	 * Original signature : <code>AVCodec* avcodec_find_decoder(AVCodecID)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2232</i>
	 */
	AVCodec avcodec_find_decoder(int id);
	/**
	 * Find a registered decoder with the specified name.<br>
	 * * @param name name of the requested decoder<br>
	 * @return A decoder if one was found, NULL otherwise.<br>
	 * Original signature : <code>AVCodec* avcodec_find_decoder_by_name(const char*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2239</i><br>
	 * @deprecated use the safer methods {@link #avcodec_find_decoder_by_name(java.lang.String)} and {@link #avcodec_find_decoder_by_name(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	AVCodec avcodec_find_decoder_by_name(Pointer name);
	/**
	 * Find a registered decoder with the specified name.<br>
	 * * @param name name of the requested decoder<br>
	 * @return A decoder if one was found, NULL otherwise.<br>
	 * Original signature : <code>AVCodec* avcodec_find_decoder_by_name(const char*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2239</i>
	 */
	AVCodec avcodec_find_decoder_by_name(String name);
	/**
	 * Original signature : <code>int avcodec_default_get_buffer(AVCodecContext*, AVFrame*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2241</i>
	 */
	int avcodec_default_get_buffer(AVCodecContext s, AVFrame pic);
	/**
	 * Original signature : <code>void avcodec_default_release_buffer(AVCodecContext*, AVFrame*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2243</i>
	 */
	void avcodec_default_release_buffer(AVCodecContext s, AVFrame pic);
	/**
	 * Original signature : <code>int avcodec_default_reget_buffer(AVCodecContext*, AVFrame*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2245</i>
	 */
	int avcodec_default_reget_buffer(AVCodecContext s, AVFrame pic);
	/**
	 * The default callback for AVCodecContext.get_buffer2(). It is made public so<br>
	 * it can be called by custom get_buffer2() implementations for decoders without<br>
	 * CODEC_CAP_DR1 set.<br>
	 * Original signature : <code>int avcodec_default_get_buffer2(AVCodecContext*, AVFrame*, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2252</i>
	 */
	int avcodec_default_get_buffer2(AVCodecContext s, AVFrame frame, int flags);
	/**
	 * Return the amount of padding in pixels which the get_buffer callback must<br>
	 * provide around the edge of the image for codecs which do not have the<br>
	 * CODEC_FLAG_EMU_EDGE flag.<br>
	 * * @return Required padding in pixels.<br>
	 * Original signature : <code>int avcodec_get_edge_width()</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2260</i>
	 */
	int avcodec_get_edge_width();
	/**
	 * Modify width and height values so that they will result in a memory<br>
	 * buffer that is acceptable for the codec if you do not use any horizontal<br>
	 * padding.<br>
	 * * May only be used if a codec with CODEC_CAP_DR1 has been opened.<br>
	 * If CODEC_FLAG_EMU_EDGE is not set, the dimensions must have been increased<br>
	 * according to avcodec_get_edge_width() before.<br>
	 * Original signature : <code>void avcodec_align_dimensions(AVCodecContext*, int*, int*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2270</i><br>
	 * @deprecated use the safer methods {@link #avcodec_align_dimensions(wrapffmpeg.AVCodecContext, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #avcodec_align_dimensions(wrapffmpeg.AVCodecContext, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	void avcodec_align_dimensions(AVCodecContext s, IntByReference width, IntByReference height);
	/**
	 * Modify width and height values so that they will result in a memory<br>
	 * buffer that is acceptable for the codec if you do not use any horizontal<br>
	 * padding.<br>
	 * * May only be used if a codec with CODEC_CAP_DR1 has been opened.<br>
	 * If CODEC_FLAG_EMU_EDGE is not set, the dimensions must have been increased<br>
	 * according to avcodec_get_edge_width() before.<br>
	 * Original signature : <code>void avcodec_align_dimensions(AVCodecContext*, int*, int*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2270</i>
	 */
	void avcodec_align_dimensions(AVCodecContext s, IntBuffer width, IntBuffer height);
	/**
	 * Modify width and height values so that they will result in a memory<br>
	 * buffer that is acceptable for the codec if you also ensure that all<br>
	 * line sizes are a multiple of the respective linesize_align[i].<br>
	 * * May only be used if a codec with CODEC_CAP_DR1 has been opened.<br>
	 * If CODEC_FLAG_EMU_EDGE is not set, the dimensions must have been increased<br>
	 * according to avcodec_get_edge_width() before.<br>
	 * Original signature : <code>void avcodec_align_dimensions2(AVCodecContext*, int*, int*, int[8])</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2280</i><br>
	 * @deprecated use the safer methods {@link #avcodec_align_dimensions2(wrapffmpeg.AVCodecContext, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #avcodec_align_dimensions2(wrapffmpeg.AVCodecContext, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	void avcodec_align_dimensions2(AVCodecContext s, IntByReference width, IntByReference height, IntByReference linesize_align);
	/**
	 * Modify width and height values so that they will result in a memory<br>
	 * buffer that is acceptable for the codec if you also ensure that all<br>
	 * line sizes are a multiple of the respective linesize_align[i].<br>
	 * * May only be used if a codec with CODEC_CAP_DR1 has been opened.<br>
	 * If CODEC_FLAG_EMU_EDGE is not set, the dimensions must have been increased<br>
	 * according to avcodec_get_edge_width() before.<br>
	 * Original signature : <code>void avcodec_align_dimensions2(AVCodecContext*, int*, int*, int[8])</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2280</i>
	 */
	void avcodec_align_dimensions2(AVCodecContext s, IntBuffer width, IntBuffer height, IntBuffer linesize_align);
	/**
	 * Converts AVChromaLocation to swscale x/y chroma position.<br>
	 * * The positions represent the chroma (0,0) position in a coordinates system<br>
	 * with luma (0,0) representing the origin and luma(1,1) representing 256,256<br>
	 * * @param xpos  horizontal chroma sample position<br>
	 * @param ypos  vertical   chroma sample position<br>
	 * Original signature : <code>int avcodec_enum_to_chroma_pos(int*, int*, AVChromaLocation)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2289</i><br>
	 * @deprecated use the safer methods {@link #avcodec_enum_to_chroma_pos(java.nio.IntBuffer, java.nio.IntBuffer, int)} and {@link #avcodec_enum_to_chroma_pos(com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	int avcodec_enum_to_chroma_pos(IntByReference xpos, IntByReference ypos, int pos);
	/**
	 * Converts AVChromaLocation to swscale x/y chroma position.<br>
	 * * The positions represent the chroma (0,0) position in a coordinates system<br>
	 * with luma (0,0) representing the origin and luma(1,1) representing 256,256<br>
	 * * @param xpos  horizontal chroma sample position<br>
	 * @param ypos  vertical   chroma sample position<br>
	 * Original signature : <code>int avcodec_enum_to_chroma_pos(int*, int*, AVChromaLocation)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2289</i>
	 */
	int avcodec_enum_to_chroma_pos(IntBuffer xpos, IntBuffer ypos, int pos);
	/**
	 * Converts swscale x/y chroma position to AVChromaLocation.<br>
	 * * The positions represent the chroma (0,0) position in a coordinates system<br>
	 * with luma (0,0) representing the origin and luma(1,1) representing 256,256<br>
	 * * @param xpos  horizontal chroma sample position<br>
	 * @param ypos  vertical   chroma sample position<br>
	 * Original signature : <code>AVChromaLocation avcodec_chroma_pos_to_enum(int, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2298</i>
	 */
	int avcodec_chroma_pos_to_enum(int xpos, int ypos);
	/**
	 * Wrapper function which calls avcodec_decode_audio4.<br>
	 * * @deprecated Use avcodec_decode_audio4 instead.<br>
	 * * Decode the audio frame of size avpkt->size from avpkt->data into samples.<br>
	 * Some decoders may support multiple frames in a single AVPacket, such<br>
	 * decoders would then just decode the first frame. In this case,<br>
	 * avcodec_decode_audio3 has to be called again with an AVPacket that contains<br>
	 * the remaining data in order to decode the second frame etc.<br>
	 * If no frame<br>
	 * could be outputted, frame_size_ptr is zero. Otherwise, it is the<br>
	 * decompressed frame size in bytes.<br>
	 * * @warning You must set frame_size_ptr to the allocated size of the<br>
	 * output buffer before calling avcodec_decode_audio3().<br>
	 * * @warning The input buffer must be FF_INPUT_BUFFER_PADDING_SIZE larger than<br>
	 * the actual read bytes because some optimized bitstream readers read 32 or 64<br>
	 * bits at once and could read over the end.<br>
	 * * @warning The end of the input buffer avpkt->data should be set to 0 to ensure that<br>
	 * no overreading happens for damaged MPEG streams.<br>
	 * * @warning You must not provide a custom get_buffer() when using<br>
	 * avcodec_decode_audio3().  Doing so will override it with<br>
	 * avcodec_default_get_buffer.  Use avcodec_decode_audio4() instead,<br>
	 * which does allow the application to provide a custom get_buffer().<br>
	 * * @note You might have to align the input buffer avpkt->data and output buffer<br>
	 * samples. The alignment requirements depend on the CPU: On some CPUs it isn't<br>
	 * necessary at all, on others it won't work at all if not aligned and on others<br>
	 * it will work but it will have an impact on performance.<br>
	 * * In practice, avpkt->data should have 4 byte alignment at minimum and<br>
	 * samples should be 16 byte aligned unless the CPU doesn't need it<br>
	 * (AltiVec and SSE do).<br>
	 * * @note Codecs which have the CODEC_CAP_DELAY capability set have a delay<br>
	 * between input and output, these need to be fed with avpkt->data=NULL,<br>
	 * avpkt->size=0 at the end to return the remaining frames.<br>
	 * * @param avctx the codec context<br>
	 * @param[out] samples the output buffer, sample type in avctx->sample_fmt<br>
	 *                     If the sample format is planar, each channel plane will<br>
	 *                     be the same size, with no padding between channels.<br>
	 * @param[in,out] frame_size_ptr the output buffer size in bytes<br>
	 * @param[in] avpkt The input AVPacket containing the input buffer.<br>
	 *            You can create such packet with av_init_packet() and by then setting<br>
	 *            data and size, some decoders might in addition need other fields.<br>
	 *            All decoders are designed to use the least fields possible though.<br>
	 * @return On error a negative value is returned, otherwise the number of bytes<br>
	 * used or zero if no frame data was decompressed (used) from the input AVPacket.<br>
	 * Original signature : <code>int avcodec_decode_audio3(AVCodecContext*, int16_t*, int*, AVPacket*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2344</i><br>
	 * @deprecated use the safer methods {@link #avcodec_decode_audio3(wrapffmpeg.AVCodecContext, java.nio.ShortBuffer, java.nio.IntBuffer, wrapffmpeg.AVPacket)} and {@link #avcodec_decode_audio3(wrapffmpeg.AVCodecContext, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.IntByReference, wrapffmpeg.AVPacket)} instead
	 */
	@Deprecated 
	int avcodec_decode_audio3(AVCodecContext avctx, ShortByReference samples, IntByReference frame_size_ptr, AVPacket avpkt);
	/**
	 * Wrapper function which calls avcodec_decode_audio4.<br>
	 * * @deprecated Use avcodec_decode_audio4 instead.<br>
	 * * Decode the audio frame of size avpkt->size from avpkt->data into samples.<br>
	 * Some decoders may support multiple frames in a single AVPacket, such<br>
	 * decoders would then just decode the first frame. In this case,<br>
	 * avcodec_decode_audio3 has to be called again with an AVPacket that contains<br>
	 * the remaining data in order to decode the second frame etc.<br>
	 * If no frame<br>
	 * could be outputted, frame_size_ptr is zero. Otherwise, it is the<br>
	 * decompressed frame size in bytes.<br>
	 * * @warning You must set frame_size_ptr to the allocated size of the<br>
	 * output buffer before calling avcodec_decode_audio3().<br>
	 * * @warning The input buffer must be FF_INPUT_BUFFER_PADDING_SIZE larger than<br>
	 * the actual read bytes because some optimized bitstream readers read 32 or 64<br>
	 * bits at once and could read over the end.<br>
	 * * @warning The end of the input buffer avpkt->data should be set to 0 to ensure that<br>
	 * no overreading happens for damaged MPEG streams.<br>
	 * * @warning You must not provide a custom get_buffer() when using<br>
	 * avcodec_decode_audio3().  Doing so will override it with<br>
	 * avcodec_default_get_buffer.  Use avcodec_decode_audio4() instead,<br>
	 * which does allow the application to provide a custom get_buffer().<br>
	 * * @note You might have to align the input buffer avpkt->data and output buffer<br>
	 * samples. The alignment requirements depend on the CPU: On some CPUs it isn't<br>
	 * necessary at all, on others it won't work at all if not aligned and on others<br>
	 * it will work but it will have an impact on performance.<br>
	 * * In practice, avpkt->data should have 4 byte alignment at minimum and<br>
	 * samples should be 16 byte aligned unless the CPU doesn't need it<br>
	 * (AltiVec and SSE do).<br>
	 * * @note Codecs which have the CODEC_CAP_DELAY capability set have a delay<br>
	 * between input and output, these need to be fed with avpkt->data=NULL,<br>
	 * avpkt->size=0 at the end to return the remaining frames.<br>
	 * * @param avctx the codec context<br>
	 * @param[out] samples the output buffer, sample type in avctx->sample_fmt<br>
	 *                     If the sample format is planar, each channel plane will<br>
	 *                     be the same size, with no padding between channels.<br>
	 * @param[in,out] frame_size_ptr the output buffer size in bytes<br>
	 * @param[in] avpkt The input AVPacket containing the input buffer.<br>
	 *            You can create such packet with av_init_packet() and by then setting<br>
	 *            data and size, some decoders might in addition need other fields.<br>
	 *            All decoders are designed to use the least fields possible though.<br>
	 * @return On error a negative value is returned, otherwise the number of bytes<br>
	 * used or zero if no frame data was decompressed (used) from the input AVPacket.<br>
	 * Original signature : <code>int avcodec_decode_audio3(AVCodecContext*, int16_t*, int*, AVPacket*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2344</i>
	 */
	int avcodec_decode_audio3(AVCodecContext avctx, ShortBuffer samples, IntBuffer frame_size_ptr, AVPacket avpkt);
	/**
	 * Decode the audio frame of size avpkt->size from avpkt->data into frame.<br>
	 * * Some decoders may support multiple frames in a single AVPacket. Such<br>
	 * decoders would then just decode the first frame. In this case,<br>
	 * avcodec_decode_audio4 has to be called again with an AVPacket containing<br>
	 * the remaining data in order to decode the second frame, etc...<br>
	 * Even if no frames are returned, the packet needs to be fed to the decoder<br>
	 * with remaining data until it is completely consumed or an error occurs.<br>
	 * * @warning The input buffer, avpkt->data must be FF_INPUT_BUFFER_PADDING_SIZE<br>
	 *          larger than the actual read bytes because some optimized bitstream<br>
	 *          readers read 32 or 64 bits at once and could read over the end.<br>
	 * * @note You might have to align the input buffer. The alignment requirements<br>
	 *       depend on the CPU and the decoder.<br>
	 * * @param      avctx the codec context<br>
	 * @param[out] frame The AVFrame in which to store decoded audio samples.<br>
	 *                   The decoder will allocate a buffer for the decoded frame by<br>
	 *                   calling the AVCodecContext.get_buffer2() callback.<br>
	 *                   When AVCodecContext.refcounted_frames is set to 1, the frame is<br>
	 *                   reference counted and the returned reference belongs to the<br>
	 *                   caller. The caller must release the frame using av_frame_unref()<br>
	 *                   when the frame is no longer needed. The caller may safely write<br>
	 *                   to the frame if av_frame_is_writable() returns 1.<br>
	 *                   When AVCodecContext.refcounted_frames is set to 0, the returned<br>
	 *                   reference belongs to the decoder and is valid only until the<br>
	 *                   next call to this function or until closing the decoder.<br>
	 *                   The caller may not write to it.<br>
	 * @param[out] got_frame_ptr Zero if no frame could be decoded, otherwise it is<br>
	 *                           non-zero.<br>
	 * @param[in]  avpkt The input AVPacket containing the input buffer.<br>
	 *                   At least avpkt->data and avpkt->size should be set. Some<br>
	 *                   decoders might also require additional fields to be set.<br>
	 * @return A negative error code is returned if an error occurred during<br>
	 *         decoding, otherwise the number of bytes consumed from the input<br>
	 *         AVPacket is returned.<br>
	 * Original signature : <code>int avcodec_decode_audio4(AVCodecContext*, AVFrame*, int*, const AVPacket*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2381</i><br>
	 * @deprecated use the safer methods {@link #avcodec_decode_audio4(wrapffmpeg.AVCodecContext, wrapffmpeg.AVFrame, java.nio.IntBuffer, wrapffmpeg.AVPacket)} and {@link #avcodec_decode_audio4(wrapffmpeg.AVCodecContext, wrapffmpeg.AVFrame, com.sun.jna.ptr.IntByReference, wrapffmpeg.AVPacket)} instead
	 */
	@Deprecated 
	int avcodec_decode_audio4(AVCodecContext avctx, AVFrame frame, IntByReference got_frame_ptr, AVPacket avpkt);
	/**
	 * Decode the audio frame of size avpkt->size from avpkt->data into frame.<br>
	 * * Some decoders may support multiple frames in a single AVPacket. Such<br>
	 * decoders would then just decode the first frame. In this case,<br>
	 * avcodec_decode_audio4 has to be called again with an AVPacket containing<br>
	 * the remaining data in order to decode the second frame, etc...<br>
	 * Even if no frames are returned, the packet needs to be fed to the decoder<br>
	 * with remaining data until it is completely consumed or an error occurs.<br>
	 * * @warning The input buffer, avpkt->data must be FF_INPUT_BUFFER_PADDING_SIZE<br>
	 *          larger than the actual read bytes because some optimized bitstream<br>
	 *          readers read 32 or 64 bits at once and could read over the end.<br>
	 * * @note You might have to align the input buffer. The alignment requirements<br>
	 *       depend on the CPU and the decoder.<br>
	 * * @param      avctx the codec context<br>
	 * @param[out] frame The AVFrame in which to store decoded audio samples.<br>
	 *                   The decoder will allocate a buffer for the decoded frame by<br>
	 *                   calling the AVCodecContext.get_buffer2() callback.<br>
	 *                   When AVCodecContext.refcounted_frames is set to 1, the frame is<br>
	 *                   reference counted and the returned reference belongs to the<br>
	 *                   caller. The caller must release the frame using av_frame_unref()<br>
	 *                   when the frame is no longer needed. The caller may safely write<br>
	 *                   to the frame if av_frame_is_writable() returns 1.<br>
	 *                   When AVCodecContext.refcounted_frames is set to 0, the returned<br>
	 *                   reference belongs to the decoder and is valid only until the<br>
	 *                   next call to this function or until closing the decoder.<br>
	 *                   The caller may not write to it.<br>
	 * @param[out] got_frame_ptr Zero if no frame could be decoded, otherwise it is<br>
	 *                           non-zero.<br>
	 * @param[in]  avpkt The input AVPacket containing the input buffer.<br>
	 *                   At least avpkt->data and avpkt->size should be set. Some<br>
	 *                   decoders might also require additional fields to be set.<br>
	 * @return A negative error code is returned if an error occurred during<br>
	 *         decoding, otherwise the number of bytes consumed from the input<br>
	 *         AVPacket is returned.<br>
	 * Original signature : <code>int avcodec_decode_audio4(AVCodecContext*, AVFrame*, int*, const AVPacket*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2381</i>
	 */
	int avcodec_decode_audio4(AVCodecContext avctx, AVFrame frame, IntBuffer got_frame_ptr, AVPacket avpkt);
	/**
	 * Decode the video frame of size avpkt->size from avpkt->data into picture.<br>
	 * Some decoders may support multiple frames in a single AVPacket, such<br>
	 * decoders would then just decode the first frame.<br>
	 * * @warning The input buffer must be FF_INPUT_BUFFER_PADDING_SIZE larger than<br>
	 * the actual read bytes because some optimized bitstream readers read 32 or 64<br>
	 * bits at once and could read over the end.<br>
	 * * @warning The end of the input buffer buf should be set to 0 to ensure that<br>
	 * no overreading happens for damaged MPEG streams.<br>
	 * * @note You might have to align the input buffer avpkt->data.<br>
	 * The alignment requirements depend on the CPU: on some CPUs it isn't<br>
	 * necessary at all, on others it won't work at all if not aligned and on others<br>
	 * it will work but it will have an impact on performance.<br>
	 * * In practice, avpkt->data should have 4 byte alignment at minimum.<br>
	 * * @note Codecs which have the CODEC_CAP_DELAY capability set have a delay<br>
	 * between input and output, these need to be fed with avpkt->data=NULL,<br>
	 * avpkt->size=0 at the end to return the remaining frames.<br>
	 * * @param avctx the codec context<br>
	 * @param[out] picture The AVFrame in which the decoded video frame will be stored.<br>
	 *             Use av_frame_alloc() to get an AVFrame. The codec will<br>
	 *             allocate memory for the actual bitmap by calling the<br>
	 *             AVCodecContext.get_buffer2() callback.<br>
	 *             When AVCodecContext.refcounted_frames is set to 1, the frame is<br>
	 *             reference counted and the returned reference belongs to the<br>
	 *             caller. The caller must release the frame using av_frame_unref()<br>
	 *             when the frame is no longer needed. The caller may safely write<br>
	 *             to the frame if av_frame_is_writable() returns 1.<br>
	 *             When AVCodecContext.refcounted_frames is set to 0, the returned<br>
	 *             reference belongs to the decoder and is valid only until the<br>
	 *             next call to this function or until closing the decoder. The<br>
	 *             caller may not write to it.<br>
	 * * @param[in] avpkt The input AVpacket containing the input buffer.<br>
	 *            You can create such packet with av_init_packet() and by then setting<br>
	 *            data and size, some decoders might in addition need other fields like<br>
	 *            flags&AV_PKT_FLAG_KEY. All decoders are designed to use the least<br>
	 *            fields possible.<br>
	 * @param[in,out] got_picture_ptr Zero if no frame could be decompressed, otherwise, it is nonzero.<br>
	 * @return On error a negative value is returned, otherwise the number of bytes<br>
	 * used or zero if no frame could be decompressed.<br>
	 * Original signature : <code>int avcodec_decode_video2(AVCodecContext*, AVFrame*, int*, const AVPacket*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2423</i><br>
	 * @deprecated use the safer methods {@link #avcodec_decode_video2(wrapffmpeg.AVCodecContext, wrapffmpeg.AVFrame, java.nio.IntBuffer, wrapffmpeg.AVPacket)} and {@link #avcodec_decode_video2(wrapffmpeg.AVCodecContext, wrapffmpeg.AVFrame, com.sun.jna.ptr.IntByReference, wrapffmpeg.AVPacket)} instead
	 */
	@Deprecated 
	int avcodec_decode_video2(AVCodecContext avctx, AVFrame picture, IntByReference got_picture_ptr, AVPacket avpkt);
	/**
	 * Decode the video frame of size avpkt->size from avpkt->data into picture.<br>
	 * Some decoders may support multiple frames in a single AVPacket, such<br>
	 * decoders would then just decode the first frame.<br>
	 * * @warning The input buffer must be FF_INPUT_BUFFER_PADDING_SIZE larger than<br>
	 * the actual read bytes because some optimized bitstream readers read 32 or 64<br>
	 * bits at once and could read over the end.<br>
	 * * @warning The end of the input buffer buf should be set to 0 to ensure that<br>
	 * no overreading happens for damaged MPEG streams.<br>
	 * * @note You might have to align the input buffer avpkt->data.<br>
	 * The alignment requirements depend on the CPU: on some CPUs it isn't<br>
	 * necessary at all, on others it won't work at all if not aligned and on others<br>
	 * it will work but it will have an impact on performance.<br>
	 * * In practice, avpkt->data should have 4 byte alignment at minimum.<br>
	 * * @note Codecs which have the CODEC_CAP_DELAY capability set have a delay<br>
	 * between input and output, these need to be fed with avpkt->data=NULL,<br>
	 * avpkt->size=0 at the end to return the remaining frames.<br>
	 * * @param avctx the codec context<br>
	 * @param[out] picture The AVFrame in which the decoded video frame will be stored.<br>
	 *             Use av_frame_alloc() to get an AVFrame. The codec will<br>
	 *             allocate memory for the actual bitmap by calling the<br>
	 *             AVCodecContext.get_buffer2() callback.<br>
	 *             When AVCodecContext.refcounted_frames is set to 1, the frame is<br>
	 *             reference counted and the returned reference belongs to the<br>
	 *             caller. The caller must release the frame using av_frame_unref()<br>
	 *             when the frame is no longer needed. The caller may safely write<br>
	 *             to the frame if av_frame_is_writable() returns 1.<br>
	 *             When AVCodecContext.refcounted_frames is set to 0, the returned<br>
	 *             reference belongs to the decoder and is valid only until the<br>
	 *             next call to this function or until closing the decoder. The<br>
	 *             caller may not write to it.<br>
	 * * @param[in] avpkt The input AVpacket containing the input buffer.<br>
	 *            You can create such packet with av_init_packet() and by then setting<br>
	 *            data and size, some decoders might in addition need other fields like<br>
	 *            flags&AV_PKT_FLAG_KEY. All decoders are designed to use the least<br>
	 *            fields possible.<br>
	 * @param[in,out] got_picture_ptr Zero if no frame could be decompressed, otherwise, it is nonzero.<br>
	 * @return On error a negative value is returned, otherwise the number of bytes<br>
	 * used or zero if no frame could be decompressed.<br>
	 * Original signature : <code>int avcodec_decode_video2(AVCodecContext*, AVFrame*, int*, const AVPacket*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2423</i>
	 */
	int avcodec_decode_video2(AVCodecContext avctx, AVFrame picture, IntBuffer got_picture_ptr, AVPacket avpkt);
	/**
	 * Decode a subtitle message.<br>
	 * Return a negative value on error, otherwise return the number of bytes used.<br>
	 * If no subtitle could be decompressed, got_sub_ptr is zero.<br>
	 * Otherwise, the subtitle is stored in *sub.<br>
	 * Note that CODEC_CAP_DR1 is not available for subtitle codecs. This is for<br>
	 * simplicity, because the performance difference is expect to be negligible<br>
	 * and reusing a get_buffer written for video codecs would probably perform badly<br>
	 * due to a potentially very different allocation pattern.<br>
	 * * @param avctx the codec context<br>
	 * @param[out] sub The AVSubtitle in which the decoded subtitle will be stored, must be<br>
	 * freed with avsubtitle_free if *got_sub_ptr is set.<br>
	 * @param[in,out] got_sub_ptr Zero if no subtitle could be decompressed, otherwise, it is nonzero.<br>
	 * @param[in] avpkt The input AVPacket containing the input buffer.<br>
	 * Original signature : <code>int avcodec_decode_subtitle2(AVCodecContext*, AVSubtitle*, int*, AVPacket*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2440</i><br>
	 * @deprecated use the safer methods {@link #avcodec_decode_subtitle2(wrapffmpeg.AVCodecContext, wrapffmpeg.AVSubtitle, java.nio.IntBuffer, wrapffmpeg.AVPacket)} and {@link #avcodec_decode_subtitle2(wrapffmpeg.AVCodecContext, wrapffmpeg.AVSubtitle, com.sun.jna.ptr.IntByReference, wrapffmpeg.AVPacket)} instead
	 */
	@Deprecated 
	int avcodec_decode_subtitle2(AVCodecContext avctx, AVSubtitle sub, IntByReference got_sub_ptr, AVPacket avpkt);
	/**
	 * Decode a subtitle message.<br>
	 * Return a negative value on error, otherwise return the number of bytes used.<br>
	 * If no subtitle could be decompressed, got_sub_ptr is zero.<br>
	 * Otherwise, the subtitle is stored in *sub.<br>
	 * Note that CODEC_CAP_DR1 is not available for subtitle codecs. This is for<br>
	 * simplicity, because the performance difference is expect to be negligible<br>
	 * and reusing a get_buffer written for video codecs would probably perform badly<br>
	 * due to a potentially very different allocation pattern.<br>
	 * * @param avctx the codec context<br>
	 * @param[out] sub The AVSubtitle in which the decoded subtitle will be stored, must be<br>
	 * freed with avsubtitle_free if *got_sub_ptr is set.<br>
	 * @param[in,out] got_sub_ptr Zero if no subtitle could be decompressed, otherwise, it is nonzero.<br>
	 * @param[in] avpkt The input AVPacket containing the input buffer.<br>
	 * Original signature : <code>int avcodec_decode_subtitle2(AVCodecContext*, AVSubtitle*, int*, AVPacket*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2440</i>
	 */
	int avcodec_decode_subtitle2(AVCodecContext avctx, AVSubtitle sub, IntBuffer got_sub_ptr, AVPacket avpkt);
	/**
	 * Original signature : <code>AVCodecParser* av_parser_next(AVCodecParser*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2584</i>
	 */
	AVCodecParser av_parser_next(AVCodecParser c);
	/**
	 * Original signature : <code>void av_register_codec_parser(AVCodecParser*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2586</i>
	 */
	void av_register_codec_parser(AVCodecParser parser);
	/**
	 * Original signature : <code>AVCodecParserContext* av_parser_init(int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2588</i>
	 */
	AVCodecParserContext av_parser_init(int codec_id);
	/**
	 * Parse a packet.<br>
	 * * @param s             parser context.<br>
	 * @param avctx         codec context.<br>
	 * @param poutbuf       set to pointer to parsed buffer or NULL if not yet finished.<br>
	 * @param poutbuf_size  set to size of parsed buffer or zero if not yet finished.<br>
	 * @param buf           input buffer.<br>
	 * @param buf_size      input length, to signal EOF, this should be 0 (so that the last frame can be output).<br>
	 * @param pts           input presentation timestamp.<br>
	 * @param dts           input decoding timestamp.<br>
	 * @param pos           input byte position in stream.<br>
	 * @return the number of bytes of the input bitstream used.<br>
	 * * Example:<br>
	 * @code<br>
	 *   while(in_len){<br>
	 *       len = av_parser_parse2(myparser, AVCodecContext, &data, &size,<br>
	 *                                        in_data, in_len,<br>
	 *                                        pts, dts, pos);<br>
	 *       in_data += len;<br>
	 *       in_len  -= len;<br>
	 * *       if(size)<br>
	 *          decode_frame(data, size);<br>
	 *   }<br>
	 * @endcode<br>
	 * Original signature : <code>int av_parser_parse2(AVCodecParserContext*, AVCodecContext*, uint8_t**, int*, const uint8_t*, int, int64_t, int64_t, int64_t)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2615</i><br>
	 * @deprecated use the safer methods {@link #av_parser_parse2(wrapffmpeg.AVCodecParserContext, wrapffmpeg.AVCodecContext, com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, java.nio.ByteBuffer, int, long, long, long)} and {@link #av_parser_parse2(wrapffmpeg.AVCodecParserContext, wrapffmpeg.AVCodecContext, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, int, long, long, long)} instead
	 */
	@Deprecated 
	int av_parser_parse2(AVCodecParserContext s, AVCodecContext avctx, PointerByReference poutbuf, IntByReference poutbuf_size, Pointer buf, int buf_size, long pts, long dts, long pos);
	/**
	 * Parse a packet.<br>
	 * * @param s             parser context.<br>
	 * @param avctx         codec context.<br>
	 * @param poutbuf       set to pointer to parsed buffer or NULL if not yet finished.<br>
	 * @param poutbuf_size  set to size of parsed buffer or zero if not yet finished.<br>
	 * @param buf           input buffer.<br>
	 * @param buf_size      input length, to signal EOF, this should be 0 (so that the last frame can be output).<br>
	 * @param pts           input presentation timestamp.<br>
	 * @param dts           input decoding timestamp.<br>
	 * @param pos           input byte position in stream.<br>
	 * @return the number of bytes of the input bitstream used.<br>
	 * * Example:<br>
	 * @code<br>
	 *   while(in_len){<br>
	 *       len = av_parser_parse2(myparser, AVCodecContext, &data, &size,<br>
	 *                                        in_data, in_len,<br>
	 *                                        pts, dts, pos);<br>
	 *       in_data += len;<br>
	 *       in_len  -= len;<br>
	 * *       if(size)<br>
	 *          decode_frame(data, size);<br>
	 *   }<br>
	 * @endcode<br>
	 * Original signature : <code>int av_parser_parse2(AVCodecParserContext*, AVCodecContext*, uint8_t**, int*, const uint8_t*, int, int64_t, int64_t, int64_t)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2615</i>
	 */
	int av_parser_parse2(AVCodecParserContext s, AVCodecContext avctx, PointerByReference poutbuf, IntBuffer poutbuf_size, ByteBuffer buf, int buf_size, long pts, long dts, long pos);
	/**
	 * @return 0 if the output buffer is a subset of the input, 1 if it is allocated and must be freed<br>
	 * @deprecated use AVBitStreamFilter<br>
	 * Original signature : <code>int av_parser_change(AVCodecParserContext*, AVCodecContext*, uint8_t**, int*, const uint8_t*, int, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2621</i><br>
	 * @deprecated use the safer methods {@link #av_parser_change(wrapffmpeg.AVCodecParserContext, wrapffmpeg.AVCodecContext, com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, java.nio.ByteBuffer, int, int)} and {@link #av_parser_change(wrapffmpeg.AVCodecParserContext, wrapffmpeg.AVCodecContext, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int av_parser_change(AVCodecParserContext s, AVCodecContext avctx, PointerByReference poutbuf, IntByReference poutbuf_size, Pointer buf, int buf_size, int keyframe);
	/**
	 * @return 0 if the output buffer is a subset of the input, 1 if it is allocated and must be freed<br>
	 * @deprecated use AVBitStreamFilter<br>
	 * Original signature : <code>int av_parser_change(AVCodecParserContext*, AVCodecContext*, uint8_t**, int*, const uint8_t*, int, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2621</i>
	 */
	int av_parser_change(AVCodecParserContext s, AVCodecContext avctx, PointerByReference poutbuf, IntBuffer poutbuf_size, ByteBuffer buf, int buf_size, int keyframe);
	/**
	 * Original signature : <code>void av_parser_close(AVCodecParserContext*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2623</i>
	 */
	void av_parser_close(AVCodecParserContext s);
	/**
	 * Find a registered encoder with a matching codec ID.<br>
	 * * @param id AVCodecID of the requested encoder<br>
	 * @return An encoder if one was found, NULL otherwise.<br>
	 * Original signature : <code>AVCodec* avcodec_find_encoder(AVCodecID)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2630</i>
	 */
	AVCodec avcodec_find_encoder(int id);
	/**
	 * Find a registered encoder with the specified name.<br>
	 * * @param name name of the requested encoder<br>
	 * @return An encoder if one was found, NULL otherwise.<br>
	 * Original signature : <code>AVCodec* avcodec_find_encoder_by_name(const char*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2637</i><br>
	 * @deprecated use the safer methods {@link #avcodec_find_encoder_by_name(java.lang.String)} and {@link #avcodec_find_encoder_by_name(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	AVCodec avcodec_find_encoder_by_name(Pointer name);
	/**
	 * Find a registered encoder with the specified name.<br>
	 * * @param name name of the requested encoder<br>
	 * @return An encoder if one was found, NULL otherwise.<br>
	 * Original signature : <code>AVCodec* avcodec_find_encoder_by_name(const char*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2637</i>
	 */
	AVCodec avcodec_find_encoder_by_name(String name);
	/**
	 * Encode an audio frame from samples into buf.<br>
	 * * @deprecated Use avcodec_encode_audio2 instead.<br>
	 * * @note The output buffer should be at least FF_MIN_BUFFER_SIZE bytes large.<br>
	 * However, for codecs with avctx->frame_size equal to 0 (e.g. PCM) the user<br>
	 * will know how much space is needed because it depends on the value passed<br>
	 * in buf_size as described below. In that case a lower value can be used.<br>
	 * * @param avctx the codec context<br>
	 * @param[out] buf the output buffer<br>
	 * @param[in] buf_size the output buffer size<br>
	 * @param[in] samples the input buffer containing the samples<br>
	 * The number of samples read from this buffer is frame_size*channels,<br>
	 * both of which are defined in avctx.<br>
	 * For codecs which have avctx->frame_size equal to 0 (e.g. PCM) the number of<br>
	 * samples read from samples is equal to:<br>
	 * buf_size * 8 / (avctx->channels * av_get_bits_per_sample(avctx->codec_id))<br>
	 * This also implies that av_get_bits_per_sample() must not return 0 for these<br>
	 * codecs.<br>
	 * @return On error a negative value is returned, on success zero or the number<br>
	 * of bytes used to encode the data read from the input buffer.<br>
	 * Original signature : <code>int avcodec_encode_audio(AVCodecContext*, uint8_t*, int, const short*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2660</i><br>
	 * @deprecated use the safer methods {@link #avcodec_encode_audio(wrapffmpeg.AVCodecContext, java.nio.ByteBuffer, int, java.nio.ShortBuffer)} and {@link #avcodec_encode_audio(wrapffmpeg.AVCodecContext, com.sun.jna.Pointer, int, com.sun.jna.ptr.ShortByReference)} instead
	 */
	@Deprecated 
	int avcodec_encode_audio(AVCodecContext avctx, Pointer buf, int buf_size, ShortByReference samples);
	/**
	 * Encode an audio frame from samples into buf.<br>
	 * * @deprecated Use avcodec_encode_audio2 instead.<br>
	 * * @note The output buffer should be at least FF_MIN_BUFFER_SIZE bytes large.<br>
	 * However, for codecs with avctx->frame_size equal to 0 (e.g. PCM) the user<br>
	 * will know how much space is needed because it depends on the value passed<br>
	 * in buf_size as described below. In that case a lower value can be used.<br>
	 * * @param avctx the codec context<br>
	 * @param[out] buf the output buffer<br>
	 * @param[in] buf_size the output buffer size<br>
	 * @param[in] samples the input buffer containing the samples<br>
	 * The number of samples read from this buffer is frame_size*channels,<br>
	 * both of which are defined in avctx.<br>
	 * For codecs which have avctx->frame_size equal to 0 (e.g. PCM) the number of<br>
	 * samples read from samples is equal to:<br>
	 * buf_size * 8 / (avctx->channels * av_get_bits_per_sample(avctx->codec_id))<br>
	 * This also implies that av_get_bits_per_sample() must not return 0 for these<br>
	 * codecs.<br>
	 * @return On error a negative value is returned, on success zero or the number<br>
	 * of bytes used to encode the data read from the input buffer.<br>
	 * Original signature : <code>int avcodec_encode_audio(AVCodecContext*, uint8_t*, int, const short*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2660</i>
	 */
	int avcodec_encode_audio(AVCodecContext avctx, ByteBuffer buf, int buf_size, ShortBuffer samples);
	/**
	 * Encode a frame of audio.<br>
	 * * Takes input samples from frame and writes the next output packet, if<br>
	 * available, to avpkt. The output packet does not necessarily contain data for<br>
	 * the most recent frame, as encoders can delay, split, and combine input frames<br>
	 * internally as needed.<br>
	 * * @param avctx     codec context<br>
	 * @param avpkt     output AVPacket.<br>
	 *                  The user can supply an output buffer by setting<br>
	 *                  avpkt->data and avpkt->size prior to calling the<br>
	 *                  function, but if the size of the user-provided data is not<br>
	 *                  large enough, encoding will fail. If avpkt->data and<br>
	 *                  avpkt->size are set, avpkt->destruct must also be set. All<br>
	 *                  other AVPacket fields will be reset by the encoder using<br>
	 *                  av_init_packet(). If avpkt->data is NULL, the encoder will<br>
	 *                  allocate it. The encoder will set avpkt->size to the size<br>
	 *                  of the output packet.<br>
	 * *                  If this function fails or produces no output, avpkt will be<br>
	 *                  freed using av_free_packet() (i.e. avpkt->destruct will be<br>
	 *                  called to free the user supplied buffer).<br>
	 * @param[in] frame AVFrame containing the raw audio data to be encoded.<br>
	 *                  May be NULL when flushing an encoder that has the<br>
	 *                  CODEC_CAP_DELAY capability set.<br>
	 *                  If CODEC_CAP_VARIABLE_FRAME_SIZE is set, then each frame<br>
	 *                  can have any number of samples.<br>
	 *                  If it is not set, frame->nb_samples must be equal to<br>
	 *                  avctx->frame_size for all frames except the last.<br>
	 *                  The final frame may be smaller than avctx->frame_size.<br>
	 * @param[out] got_packet_ptr This field is set to 1 by libavcodec if the<br>
	 *                            output packet is non-empty, and to 0 if it is<br>
	 *                            empty. If the function returns an error, the<br>
	 *                            packet can be assumed to be invalid, and the<br>
	 *                            value of got_packet_ptr is undefined and should<br>
	 *                            not be used.<br>
	 * @return          0 on success, negative error code on failure<br>
	 * Original signature : <code>int avcodec_encode_audio2(AVCodecContext*, AVPacket*, const AVFrame*, int*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2698</i><br>
	 * @deprecated use the safer methods {@link #avcodec_encode_audio2(wrapffmpeg.AVCodecContext, wrapffmpeg.AVPacket, wrapffmpeg.AVFrame, java.nio.IntBuffer)} and {@link #avcodec_encode_audio2(wrapffmpeg.AVCodecContext, wrapffmpeg.AVPacket, wrapffmpeg.AVFrame, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int avcodec_encode_audio2(AVCodecContext avctx, AVPacket avpkt, AVFrame frame, IntByReference got_packet_ptr);
	/**
	 * Encode a frame of audio.<br>
	 * * Takes input samples from frame and writes the next output packet, if<br>
	 * available, to avpkt. The output packet does not necessarily contain data for<br>
	 * the most recent frame, as encoders can delay, split, and combine input frames<br>
	 * internally as needed.<br>
	 * * @param avctx     codec context<br>
	 * @param avpkt     output AVPacket.<br>
	 *                  The user can supply an output buffer by setting<br>
	 *                  avpkt->data and avpkt->size prior to calling the<br>
	 *                  function, but if the size of the user-provided data is not<br>
	 *                  large enough, encoding will fail. If avpkt->data and<br>
	 *                  avpkt->size are set, avpkt->destruct must also be set. All<br>
	 *                  other AVPacket fields will be reset by the encoder using<br>
	 *                  av_init_packet(). If avpkt->data is NULL, the encoder will<br>
	 *                  allocate it. The encoder will set avpkt->size to the size<br>
	 *                  of the output packet.<br>
	 * *                  If this function fails or produces no output, avpkt will be<br>
	 *                  freed using av_free_packet() (i.e. avpkt->destruct will be<br>
	 *                  called to free the user supplied buffer).<br>
	 * @param[in] frame AVFrame containing the raw audio data to be encoded.<br>
	 *                  May be NULL when flushing an encoder that has the<br>
	 *                  CODEC_CAP_DELAY capability set.<br>
	 *                  If CODEC_CAP_VARIABLE_FRAME_SIZE is set, then each frame<br>
	 *                  can have any number of samples.<br>
	 *                  If it is not set, frame->nb_samples must be equal to<br>
	 *                  avctx->frame_size for all frames except the last.<br>
	 *                  The final frame may be smaller than avctx->frame_size.<br>
	 * @param[out] got_packet_ptr This field is set to 1 by libavcodec if the<br>
	 *                            output packet is non-empty, and to 0 if it is<br>
	 *                            empty. If the function returns an error, the<br>
	 *                            packet can be assumed to be invalid, and the<br>
	 *                            value of got_packet_ptr is undefined and should<br>
	 *                            not be used.<br>
	 * @return          0 on success, negative error code on failure<br>
	 * Original signature : <code>int avcodec_encode_audio2(AVCodecContext*, AVPacket*, const AVFrame*, int*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2698</i>
	 */
	int avcodec_encode_audio2(AVCodecContext avctx, AVPacket avpkt, AVFrame frame, IntBuffer got_packet_ptr);
	/**
	 * Original signature : <code>int avcodec_encode_video(AVCodecContext*, uint8_t*, int, const AVFrame*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2700</i><br>
	 * @deprecated use the safer methods {@link #avcodec_encode_video(wrapffmpeg.AVCodecContext, java.nio.ByteBuffer, int, wrapffmpeg.AVFrame)} and {@link #avcodec_encode_video(wrapffmpeg.AVCodecContext, com.sun.jna.Pointer, int, wrapffmpeg.AVFrame)} instead
	 */
	@Deprecated 
	int avcodec_encode_video(AVCodecContext avctx, Pointer buf, int buf_size, AVFrame pict);
	/**
	 * Original signature : <code>int avcodec_encode_video(AVCodecContext*, uint8_t*, int, const AVFrame*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2700</i>
	 */
	int avcodec_encode_video(AVCodecContext avctx, ByteBuffer buf, int buf_size, AVFrame pict);
	/**
	 * Encode a frame of video.<br>
	 * * Takes input raw video data from frame and writes the next output packet, if<br>
	 * available, to avpkt. The output packet does not necessarily contain data for<br>
	 * the most recent frame, as encoders can delay and reorder input frames<br>
	 * internally as needed.<br>
	 * * @param avctx     codec context<br>
	 * @param avpkt     output AVPacket.<br>
	 *                  The user can supply an output buffer by setting<br>
	 *                  avpkt->data and avpkt->size prior to calling the<br>
	 *                  function, but if the size of the user-provided data is not<br>
	 *                  large enough, encoding will fail. All other AVPacket fields<br>
	 *                  will be reset by the encoder using av_init_packet(). If<br>
	 *                  avpkt->data is NULL, the encoder will allocate it.<br>
	 *                  The encoder will set avpkt->size to the size of the<br>
	 *                  output packet. The returned data (if any) belongs to the<br>
	 *                  caller, he is responsible for freeing it.<br>
	 * *                  If this function fails or produces no output, avpkt will be<br>
	 *                  freed using av_free_packet() (i.e. avpkt->destruct will be<br>
	 *                  called to free the user supplied buffer).<br>
	 * @param[in] frame AVFrame containing the raw video data to be encoded.<br>
	 *                  May be NULL when flushing an encoder that has the<br>
	 *                  CODEC_CAP_DELAY capability set.<br>
	 * @param[out] got_packet_ptr This field is set to 1 by libavcodec if the<br>
	 *                            output packet is non-empty, and to 0 if it is<br>
	 *                            empty. If the function returns an error, the<br>
	 *                            packet can be assumed to be invalid, and the<br>
	 *                            value of got_packet_ptr is undefined and should<br>
	 *                            not be used.<br>
	 * @return          0 on success, negative error code on failure<br>
	 * Original signature : <code>int avcodec_encode_video2(AVCodecContext*, AVPacket*, const AVFrame*, int*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2733</i><br>
	 * @deprecated use the safer methods {@link #avcodec_encode_video2(wrapffmpeg.AVCodecContext, wrapffmpeg.AVPacket, wrapffmpeg.AVFrame, java.nio.IntBuffer)} and {@link #avcodec_encode_video2(wrapffmpeg.AVCodecContext, wrapffmpeg.AVPacket, wrapffmpeg.AVFrame, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int avcodec_encode_video2(AVCodecContext avctx, AVPacket avpkt, AVFrame frame, IntByReference got_packet_ptr);
	/**
	 * Encode a frame of video.<br>
	 * * Takes input raw video data from frame and writes the next output packet, if<br>
	 * available, to avpkt. The output packet does not necessarily contain data for<br>
	 * the most recent frame, as encoders can delay and reorder input frames<br>
	 * internally as needed.<br>
	 * * @param avctx     codec context<br>
	 * @param avpkt     output AVPacket.<br>
	 *                  The user can supply an output buffer by setting<br>
	 *                  avpkt->data and avpkt->size prior to calling the<br>
	 *                  function, but if the size of the user-provided data is not<br>
	 *                  large enough, encoding will fail. All other AVPacket fields<br>
	 *                  will be reset by the encoder using av_init_packet(). If<br>
	 *                  avpkt->data is NULL, the encoder will allocate it.<br>
	 *                  The encoder will set avpkt->size to the size of the<br>
	 *                  output packet. The returned data (if any) belongs to the<br>
	 *                  caller, he is responsible for freeing it.<br>
	 * *                  If this function fails or produces no output, avpkt will be<br>
	 *                  freed using av_free_packet() (i.e. avpkt->destruct will be<br>
	 *                  called to free the user supplied buffer).<br>
	 * @param[in] frame AVFrame containing the raw video data to be encoded.<br>
	 *                  May be NULL when flushing an encoder that has the<br>
	 *                  CODEC_CAP_DELAY capability set.<br>
	 * @param[out] got_packet_ptr This field is set to 1 by libavcodec if the<br>
	 *                            output packet is non-empty, and to 0 if it is<br>
	 *                            empty. If the function returns an error, the<br>
	 *                            packet can be assumed to be invalid, and the<br>
	 *                            value of got_packet_ptr is undefined and should<br>
	 *                            not be used.<br>
	 * @return          0 on success, negative error code on failure<br>
	 * Original signature : <code>int avcodec_encode_video2(AVCodecContext*, AVPacket*, const AVFrame*, int*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2733</i>
	 */
	int avcodec_encode_video2(AVCodecContext avctx, AVPacket avpkt, AVFrame frame, IntBuffer got_packet_ptr);
	/**
	 * Original signature : <code>int avcodec_encode_subtitle(AVCodecContext*, uint8_t*, int, const AVSubtitle*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2735</i><br>
	 * @deprecated use the safer methods {@link #avcodec_encode_subtitle(wrapffmpeg.AVCodecContext, java.nio.ByteBuffer, int, wrapffmpeg.AVSubtitle)} and {@link #avcodec_encode_subtitle(wrapffmpeg.AVCodecContext, com.sun.jna.Pointer, int, wrapffmpeg.AVSubtitle)} instead
	 */
	@Deprecated 
	int avcodec_encode_subtitle(AVCodecContext avctx, Pointer buf, int buf_size, AVSubtitle sub);
	/**
	 * Original signature : <code>int avcodec_encode_subtitle(AVCodecContext*, uint8_t*, int, const AVSubtitle*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2735</i>
	 */
	int avcodec_encode_subtitle(AVCodecContext avctx, ByteBuffer buf, int buf_size, AVSubtitle sub);
	/**
	 * Original signature : <code>ReSampleContext* av_audio_resample_init(int, int, int, int, AVSampleFormat, AVSampleFormat, int, int, int, double)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2746</i>
	 */
	PointerByReference av_audio_resample_init(int output_channels, int input_channels, int output_rate, int input_rate, int sample_fmt_out, int sample_fmt_in, int filter_length, int log2_phase_count, int linear, double cutoff);
	/**
	 * Original signature : <code>int audio_resample(ReSampleContext*, short*, short*, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2748</i><br>
	 * @deprecated use the safer methods {@link #audio_resample(com.sun.jna.ptr.PointerByReference, java.nio.ShortBuffer, java.nio.ShortBuffer, int)} and {@link #audio_resample(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.ShortByReference, int)} instead
	 */
	@Deprecated 
	int audio_resample(Pointer s, ShortByReference output, ShortByReference input, int nb_samples);
	/**
	 * Original signature : <code>int audio_resample(ReSampleContext*, short*, short*, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2748</i>
	 */
	int audio_resample(PointerByReference s, ShortBuffer output, ShortBuffer input, int nb_samples);
	/**
	 * Original signature : <code>int audio_resample(ReSampleContext*, short*, short*, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2748</i>
	 */
	int audio_resample(PointerByReference s, ShortByReference output, ShortByReference input, int nb_samples);
	/**
	 * Original signature : <code>void audio_resample_close(ReSampleContext*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2750</i><br>
	 * @deprecated use the safer method {@link #audio_resample_close(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void audio_resample_close(Pointer s);
	/**
	 * Original signature : <code>void audio_resample_close(ReSampleContext*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2750</i>
	 */
	void audio_resample_close(PointerByReference s);
	/**
	 * Original signature : <code>AVResampleContext* av_resample_init(int, int, int, int, int, double)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2752</i>
	 */
	AvcodecLibrary.AVResampleContext av_resample_init(int out_rate, int in_rate, int filter_length, int log2_phase_count, int linear, double cutoff);
	/**
	 * Original signature : <code>int av_resample(AVResampleContext*, short*, short*, int*, int, int, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2754</i><br>
	 * @deprecated use the safer methods {@link #av_resample(wrapffmpeg.AvcodecLibrary.AVResampleContext, java.nio.ShortBuffer, java.nio.ShortBuffer, java.nio.IntBuffer, int, int, int)} and {@link #av_resample(wrapffmpeg.AvcodecLibrary.AVResampleContext, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.IntByReference, int, int, int)} instead
	 */
	@Deprecated 
	int av_resample(AvcodecLibrary.AVResampleContext c, ShortByReference dst, ShortByReference src, IntByReference consumed, int src_size, int dst_size, int update_ctx);
	/**
	 * Original signature : <code>int av_resample(AVResampleContext*, short*, short*, int*, int, int, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2754</i>
	 */
	int av_resample(AvcodecLibrary.AVResampleContext c, ShortBuffer dst, ShortBuffer src, IntBuffer consumed, int src_size, int dst_size, int update_ctx);
	/**
	 * Original signature : <code>void av_resample_compensate(AVResampleContext*, int, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2756</i>
	 */
	void av_resample_compensate(AvcodecLibrary.AVResampleContext c, int sample_delta, int compensation_distance);
	/**
	 * Original signature : <code>void av_resample_close(AVResampleContext*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2758</i>
	 */
	void av_resample_close(AvcodecLibrary.AVResampleContext c);
	/**
	 * Allocate memory for the pixels of a picture and setup the AVPicture<br>
	 * fields for it.<br>
	 * * Call avpicture_free() to free it.<br>
	 * * @param picture            the picture structure to be filled in<br>
	 * @param pix_fmt            the pixel format of the picture<br>
	 * @param width              the width of the picture<br>
	 * @param height             the height of the picture<br>
	 * @return zero if successful, a negative error code otherwise<br>
	 * * @see av_image_alloc(), avpicture_fill()<br>
	 * Original signature : <code>int avpicture_alloc(AVPicture*, AVPixelFormat, int, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2771</i>
	 */
	int avpicture_alloc(AVPicture picture, int pix_fmt, int width, int height);
	/**
	 * Free a picture previously allocated by avpicture_alloc().<br>
	 * The data buffer used by the AVPicture is freed, but the AVPicture structure<br>
	 * itself is not.<br>
	 * * @param picture the AVPicture to be freed<br>
	 * Original signature : <code>void avpicture_free(AVPicture*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2779</i>
	 */
	void avpicture_free(AVPicture picture);
	/**
	 * Setup the picture fields based on the specified image parameters<br>
	 * and the provided image data buffer.<br>
	 * * The picture fields are filled in by using the image data buffer<br>
	 * pointed to by ptr.<br>
	 * * If ptr is NULL, the function will fill only the picture linesize<br>
	 * array and return the required size for the image buffer.<br>
	 * * To allocate an image buffer and fill the picture data in one call,<br>
	 * use avpicture_alloc().<br>
	 * * @param picture       the picture to be filled in<br>
	 * @param ptr           buffer where the image data is stored, or NULL<br>
	 * @param pix_fmt       the pixel format of the image<br>
	 * @param width         the width of the image in pixels<br>
	 * @param height        the height of the image in pixels<br>
	 * @return the size in bytes required for src, a negative error code<br>
	 * in case of failure<br>
	 * * @see av_image_fill_arrays()<br>
	 * Original signature : <code>int avpicture_fill(AVPicture*, const uint8_t*, AVPixelFormat, int, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2799</i><br>
	 * @deprecated use the safer methods {@link #avpicture_fill(wrapffmpeg.AVPicture, java.nio.ByteBuffer, int, int, int)} and {@link #avpicture_fill(wrapffmpeg.AVPicture, com.sun.jna.Pointer, int, int, int)} instead
	 */
	@Deprecated 
	int avpicture_fill(AVPicture picture, Pointer ptr, int pix_fmt, int width, int height);
	/**
	 * Setup the picture fields based on the specified image parameters<br>
	 * and the provided image data buffer.<br>
	 * * The picture fields are filled in by using the image data buffer<br>
	 * pointed to by ptr.<br>
	 * * If ptr is NULL, the function will fill only the picture linesize<br>
	 * array and return the required size for the image buffer.<br>
	 * * To allocate an image buffer and fill the picture data in one call,<br>
	 * use avpicture_alloc().<br>
	 * * @param picture       the picture to be filled in<br>
	 * @param ptr           buffer where the image data is stored, or NULL<br>
	 * @param pix_fmt       the pixel format of the image<br>
	 * @param width         the width of the image in pixels<br>
	 * @param height        the height of the image in pixels<br>
	 * @return the size in bytes required for src, a negative error code<br>
	 * in case of failure<br>
	 * * @see av_image_fill_arrays()<br>
	 * Original signature : <code>int avpicture_fill(AVPicture*, const uint8_t*, AVPixelFormat, int, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2799</i>
	 */
	int avpicture_fill(AVPicture picture, ByteBuffer ptr, int pix_fmt, int width, int height);
	/**
	 * Copy pixel data from an AVPicture into a buffer.<br>
	 * * avpicture_get_size() can be used to compute the required size for<br>
	 * the buffer to fill.<br>
	 * * @param src        source picture with filled data<br>
	 * @param pix_fmt    picture pixel format<br>
	 * @param width      picture width<br>
	 * @param height     picture height<br>
	 * @param dest       destination buffer<br>
	 * @param dest_size  destination buffer size in bytes<br>
	 * @return the number of bytes written to dest, or a negative value<br>
	 * (error code) on error, for example if the destination buffer is not<br>
	 * big enough<br>
	 * * @see av_image_copy_to_buffer()<br>
	 * Original signature : <code>int avpicture_layout(const AVPicture*, AVPixelFormat, int, int, unsigned char*, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2816</i><br>
	 * @deprecated use the safer methods {@link #avpicture_layout(wrapffmpeg.AVPicture, int, int, int, java.nio.ByteBuffer, int)} and {@link #avpicture_layout(wrapffmpeg.AVPicture, int, int, int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int avpicture_layout(AVPicture src, int pix_fmt, int width, int height, Pointer dest, int dest_size);
	/**
	 * Copy pixel data from an AVPicture into a buffer.<br>
	 * * avpicture_get_size() can be used to compute the required size for<br>
	 * the buffer to fill.<br>
	 * * @param src        source picture with filled data<br>
	 * @param pix_fmt    picture pixel format<br>
	 * @param width      picture width<br>
	 * @param height     picture height<br>
	 * @param dest       destination buffer<br>
	 * @param dest_size  destination buffer size in bytes<br>
	 * @return the number of bytes written to dest, or a negative value<br>
	 * (error code) on error, for example if the destination buffer is not<br>
	 * big enough<br>
	 * * @see av_image_copy_to_buffer()<br>
	 * Original signature : <code>int avpicture_layout(const AVPicture*, AVPixelFormat, int, int, unsigned char*, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2816</i>
	 */
	int avpicture_layout(AVPicture src, int pix_fmt, int width, int height, ByteBuffer dest, int dest_size);
	/**
	 * Calculate the size in bytes that a picture of the given width and height<br>
	 * would occupy if stored in the given picture format.<br>
	 * * @param pix_fmt    picture pixel format<br>
	 * @param width      picture width<br>
	 * @param height     picture height<br>
	 * @return the computed picture buffer size or a negative error code<br>
	 * in case of error<br>
	 * * @see av_image_get_buffer_size().<br>
	 * Original signature : <code>int avpicture_get_size(AVPixelFormat, int, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2828</i>
	 */
	int avpicture_get_size(int pix_fmt, int width, int height);
	/**
	 * Original signature : <code>int avpicture_deinterlace(AVPicture*, const AVPicture*, AVPixelFormat, int, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2830</i>
	 */
	int avpicture_deinterlace(AVPicture dst, AVPicture src, int pix_fmt, int width, int height);
	/**
	 * Copy image src to dst. Wraps av_image_copy().<br>
	 * Original signature : <code>void av_picture_copy(AVPicture*, const AVPicture*, AVPixelFormat, int, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2835</i>
	 */
	void av_picture_copy(AVPicture dst, AVPicture src, int pix_fmt, int width, int height);
	/**
	 * Crop image top and left side.<br>
	 * Original signature : <code>int av_picture_crop(AVPicture*, const AVPicture*, AVPixelFormat, int, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2840</i>
	 */
	int av_picture_crop(AVPicture dst, AVPicture src, int pix_fmt, int top_band, int left_band);
	/**
	 * Pad image.<br>
	 * Original signature : <code>int av_picture_pad(AVPicture*, const AVPicture*, int, int, AVPixelFormat, int, int, int, int, int*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2845</i><br>
	 * @deprecated use the safer methods {@link #av_picture_pad(wrapffmpeg.AVPicture, wrapffmpeg.AVPicture, int, int, int, int, int, int, int, java.nio.IntBuffer)} and {@link #av_picture_pad(wrapffmpeg.AVPicture, wrapffmpeg.AVPicture, int, int, int, int, int, int, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int av_picture_pad(AVPicture dst, AVPicture src, int height, int width, int pix_fmt, int padtop, int padbottom, int padleft, int padright, IntByReference color);
	/**
	 * Pad image.<br>
	 * Original signature : <code>int av_picture_pad(AVPicture*, const AVPicture*, int, int, AVPixelFormat, int, int, int, int, int*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2845</i>
	 */
	int av_picture_pad(AVPicture dst, AVPicture src, int height, int width, int pix_fmt, int padtop, int padbottom, int padleft, int padright, IntBuffer color);
	/**
	 * Original signature : <code>void avcodec_get_chroma_sub_sample(AVPixelFormat, int*, int*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2847</i><br>
	 * @deprecated use the safer methods {@link #avcodec_get_chroma_sub_sample(int, java.nio.IntBuffer, java.nio.IntBuffer)} and {@link #avcodec_get_chroma_sub_sample(int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	void avcodec_get_chroma_sub_sample(int pix_fmt, IntByReference h_shift, IntByReference v_shift);
	/**
	 * Original signature : <code>void avcodec_get_chroma_sub_sample(AVPixelFormat, int*, int*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2847</i>
	 */
	void avcodec_get_chroma_sub_sample(int pix_fmt, IntBuffer h_shift, IntBuffer v_shift);
	/**
	 * Return a value representing the fourCC code associated to the<br>
	 * pixel format pix_fmt, or 0 if no associated fourCC code can be<br>
	 * found.<br>
	 * Original signature : <code>int avcodec_pix_fmt_to_codec_tag(AVPixelFormat)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2854</i>
	 */
	int avcodec_pix_fmt_to_codec_tag(int pix_fmt);
	/**
	 * Compute what kind of losses will occur when converting from one specific<br>
	 * pixel format to another.<br>
	 * When converting from one pixel format to another, information loss may occur.<br>
	 * For example, when converting from RGB24 to GRAY, the color information will<br>
	 * be lost. Similarly, other losses occur when converting from some formats to<br>
	 * other formats. These losses can involve loss of chroma, but also loss of<br>
	 * resolution, loss of color depth, loss due to the color space conversion, loss<br>
	 * of the alpha bits or loss due to color quantization.<br>
	 * avcodec_get_fix_fmt_loss() informs you about the various types of losses<br>
	 * which will occur when converting from one pixel format to another.<br>
	 * * @param[in] dst_pix_fmt destination pixel format<br>
	 * @param[in] src_pix_fmt source pixel format<br>
	 * @param[in] has_alpha Whether the source pixel format alpha channel is used.<br>
	 * @return Combination of flags informing you what kind of losses will occur<br>
	 * (maximum loss for an invalid dst_pix_fmt).<br>
	 * Original signature : <code>int avcodec_get_pix_fmt_loss(AVPixelFormat, AVPixelFormat, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2873</i>
	 */
	int avcodec_get_pix_fmt_loss(int dst_pix_fmt, int src_pix_fmt, int has_alpha);
	/**
	 * Find the best pixel format to convert to given a certain source pixel<br>
	 * format.  When converting from one pixel format to another, information loss<br>
	 * may occur.  For example, when converting from RGB24 to GRAY, the color<br>
	 * information will be lost. Similarly, other losses occur when converting from<br>
	 * some formats to other formats. avcodec_find_best_pix_fmt_of_2() searches which of<br>
	 * the given pixel formats should be used to suffer the least amount of loss.<br>
	 * The pixel formats from which it chooses one, are determined by the<br>
	 * pix_fmt_list parameter.<br>
	 * *<br>
	 * @param[in] pix_fmt_list AV_PIX_FMT_NONE terminated array of pixel formats to choose from<br>
	 * @param[in] src_pix_fmt source pixel format<br>
	 * @param[in] has_alpha Whether the source pixel format alpha channel is used.<br>
	 * @param[out] loss_ptr Combination of flags informing you what kind of losses will occur.<br>
	 * @return The best pixel format to convert to or -1 if none was found.<br>
	 * Original signature : <code>AVPixelFormat avcodec_find_best_pix_fmt_of_list(AVPixelFormat*, AVPixelFormat, int, int*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2891</i><br>
	 * @deprecated use the safer methods {@link #avcodec_find_best_pix_fmt_of_list(java.nio.IntBuffer, int, int, java.nio.IntBuffer)} and {@link #avcodec_find_best_pix_fmt_of_list(com.sun.jna.ptr.IntByReference, int, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int avcodec_find_best_pix_fmt_of_list(IntByReference pix_fmt_list, int src_pix_fmt, int has_alpha, IntByReference loss_ptr);
	/**
	 * Find the best pixel format to convert to given a certain source pixel<br>
	 * format.  When converting from one pixel format to another, information loss<br>
	 * may occur.  For example, when converting from RGB24 to GRAY, the color<br>
	 * information will be lost. Similarly, other losses occur when converting from<br>
	 * some formats to other formats. avcodec_find_best_pix_fmt_of_2() searches which of<br>
	 * the given pixel formats should be used to suffer the least amount of loss.<br>
	 * The pixel formats from which it chooses one, are determined by the<br>
	 * pix_fmt_list parameter.<br>
	 * *<br>
	 * @param[in] pix_fmt_list AV_PIX_FMT_NONE terminated array of pixel formats to choose from<br>
	 * @param[in] src_pix_fmt source pixel format<br>
	 * @param[in] has_alpha Whether the source pixel format alpha channel is used.<br>
	 * @param[out] loss_ptr Combination of flags informing you what kind of losses will occur.<br>
	 * @return The best pixel format to convert to or -1 if none was found.<br>
	 * Original signature : <code>AVPixelFormat avcodec_find_best_pix_fmt_of_list(AVPixelFormat*, AVPixelFormat, int, int*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2891</i>
	 */
	int avcodec_find_best_pix_fmt_of_list(IntBuffer pix_fmt_list, int src_pix_fmt, int has_alpha, IntBuffer loss_ptr);
	/**
	 * Find the best pixel format to convert to given a certain source pixel<br>
	 * format and a selection of two destination pixel formats. When converting from<br>
	 * one pixel format to another, information loss may occur.  For example, when converting<br>
	 * from RGB24 to GRAY, the color information will be lost. Similarly, other losses occur when<br>
	 * converting from some formats to other formats. avcodec_find_best_pix_fmt_of_2() selects which of<br>
	 * the given pixel formats should be used to suffer the least amount of loss.<br>
	 * * If one of the destination formats is AV_PIX_FMT_NONE the other pixel format (if valid) will be<br>
	 * returned.<br>
	 * * @code<br>
	 * src_pix_fmt = AV_PIX_FMT_YUV420P;<br>
	 * dst_pix_fmt1= AV_PIX_FMT_RGB24;<br>
	 * dst_pix_fmt2= AV_PIX_FMT_GRAY8;<br>
	 * dst_pix_fmt3= AV_PIX_FMT_RGB8;<br>
	 * loss= FF_LOSS_CHROMA; // don't care about chroma loss, so chroma loss will be ignored.<br>
	 * dst_pix_fmt = avcodec_find_best_pix_fmt_of_2(dst_pix_fmt1, dst_pix_fmt2, src_pix_fmt, alpha, &loss);<br>
	 * dst_pix_fmt = avcodec_find_best_pix_fmt_of_2(dst_pix_fmt, dst_pix_fmt3, src_pix_fmt, alpha, &loss);<br>
	 * @endcode<br>
	 * * @param[in] dst_pix_fmt1 One of the two destination pixel formats to choose from<br>
	 * @param[in] dst_pix_fmt2 The other of the two destination pixel formats to choose from<br>
	 * @param[in] src_pix_fmt Source pixel format<br>
	 * @param[in] has_alpha Whether the source pixel format alpha channel is used.<br>
	 * @param[in, out] loss_ptr Combination of loss flags. In: selects which of the losses to ignore, i.e.<br>
	 *                               NULL or value of zero means we care about all losses. Out: the loss<br>
	 *                               that occurs when converting from src to selected dst pixel format.<br>
	 * @return The best pixel format to convert to or -1 if none was found.<br>
	 * Original signature : <code>AVPixelFormat avcodec_find_best_pix_fmt_of_2(AVPixelFormat, AVPixelFormat, AVPixelFormat, int, int*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2920</i><br>
	 * @deprecated use the safer methods {@link #avcodec_find_best_pix_fmt_of_2(int, int, int, int, java.nio.IntBuffer)} and {@link #avcodec_find_best_pix_fmt_of_2(int, int, int, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int avcodec_find_best_pix_fmt_of_2(int dst_pix_fmt1, int dst_pix_fmt2, int src_pix_fmt, int has_alpha, IntByReference loss_ptr);
	/**
	 * Find the best pixel format to convert to given a certain source pixel<br>
	 * format and a selection of two destination pixel formats. When converting from<br>
	 * one pixel format to another, information loss may occur.  For example, when converting<br>
	 * from RGB24 to GRAY, the color information will be lost. Similarly, other losses occur when<br>
	 * converting from some formats to other formats. avcodec_find_best_pix_fmt_of_2() selects which of<br>
	 * the given pixel formats should be used to suffer the least amount of loss.<br>
	 * * If one of the destination formats is AV_PIX_FMT_NONE the other pixel format (if valid) will be<br>
	 * returned.<br>
	 * * @code<br>
	 * src_pix_fmt = AV_PIX_FMT_YUV420P;<br>
	 * dst_pix_fmt1= AV_PIX_FMT_RGB24;<br>
	 * dst_pix_fmt2= AV_PIX_FMT_GRAY8;<br>
	 * dst_pix_fmt3= AV_PIX_FMT_RGB8;<br>
	 * loss= FF_LOSS_CHROMA; // don't care about chroma loss, so chroma loss will be ignored.<br>
	 * dst_pix_fmt = avcodec_find_best_pix_fmt_of_2(dst_pix_fmt1, dst_pix_fmt2, src_pix_fmt, alpha, &loss);<br>
	 * dst_pix_fmt = avcodec_find_best_pix_fmt_of_2(dst_pix_fmt, dst_pix_fmt3, src_pix_fmt, alpha, &loss);<br>
	 * @endcode<br>
	 * * @param[in] dst_pix_fmt1 One of the two destination pixel formats to choose from<br>
	 * @param[in] dst_pix_fmt2 The other of the two destination pixel formats to choose from<br>
	 * @param[in] src_pix_fmt Source pixel format<br>
	 * @param[in] has_alpha Whether the source pixel format alpha channel is used.<br>
	 * @param[in, out] loss_ptr Combination of loss flags. In: selects which of the losses to ignore, i.e.<br>
	 *                               NULL or value of zero means we care about all losses. Out: the loss<br>
	 *                               that occurs when converting from src to selected dst pixel format.<br>
	 * @return The best pixel format to convert to or -1 if none was found.<br>
	 * Original signature : <code>AVPixelFormat avcodec_find_best_pix_fmt_of_2(AVPixelFormat, AVPixelFormat, AVPixelFormat, int, int*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2920</i>
	 */
	int avcodec_find_best_pix_fmt_of_2(int dst_pix_fmt1, int dst_pix_fmt2, int src_pix_fmt, int has_alpha, IntBuffer loss_ptr);
	/**
	 * Original signature : <code>AVPixelFormat avcodec_find_best_pix_fmt2(AVPixelFormat, AVPixelFormat, AVPixelFormat, int, int*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2922</i><br>
	 * @deprecated use the safer methods {@link #avcodec_find_best_pix_fmt2(int, int, int, int, java.nio.IntBuffer)} and {@link #avcodec_find_best_pix_fmt2(int, int, int, int, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int avcodec_find_best_pix_fmt2(int dst_pix_fmt1, int dst_pix_fmt2, int src_pix_fmt, int has_alpha, IntByReference loss_ptr);
	/**
	 * Original signature : <code>AVPixelFormat avcodec_find_best_pix_fmt2(AVPixelFormat, AVPixelFormat, AVPixelFormat, int, int*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2922</i>
	 */
	int avcodec_find_best_pix_fmt2(int dst_pix_fmt1, int dst_pix_fmt2, int src_pix_fmt, int has_alpha, IntBuffer loss_ptr);
	/**
	 * Original signature : <code>AVPixelFormat avcodec_default_get_format(AVCodecContext*, AVPixelFormat*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2924</i><br>
	 * @deprecated use the safer methods {@link #avcodec_default_get_format(wrapffmpeg.AVCodecContext, java.nio.IntBuffer)} and {@link #avcodec_default_get_format(wrapffmpeg.AVCodecContext, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int avcodec_default_get_format(AVCodecContext s, IntByReference fmt);
	/**
	 * Original signature : <code>AVPixelFormat avcodec_default_get_format(AVCodecContext*, AVPixelFormat*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2924</i>
	 */
	int avcodec_default_get_format(AVCodecContext s, IntBuffer fmt);
	/**
	 * Original signature : <code>void avcodec_set_dimensions(AVCodecContext*, int, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2926</i>
	 */
	void avcodec_set_dimensions(AVCodecContext s, int width, int height);
	/**
	 * Put a string representing the codec tag codec_tag in buf.<br>
	 * * @param buf_size size in bytes of buf<br>
	 * @return the length of the string that would have been generated if<br>
	 * enough space had been available, excluding the trailing null<br>
	 * Original signature : <code>size_t av_get_codec_tag_string(char*, size_t, unsigned int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2934</i><br>
	 * @deprecated use the safer methods {@link #av_get_codec_tag_string(java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize, int)} and {@link #av_get_codec_tag_string(com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize, int)} instead
	 */
	@Deprecated 
	NativeSize av_get_codec_tag_string(Pointer buf, NativeSize buf_size, int codec_tag);
	/**
	 * Put a string representing the codec tag codec_tag in buf.<br>
	 * * @param buf_size size in bytes of buf<br>
	 * @return the length of the string that would have been generated if<br>
	 * enough space had been available, excluding the trailing null<br>
	 * Original signature : <code>size_t av_get_codec_tag_string(char*, size_t, unsigned int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2934</i>
	 */
	NativeSize av_get_codec_tag_string(ByteBuffer buf, NativeSize buf_size, int codec_tag);
	/**
	 * Original signature : <code>void avcodec_string(char*, int, AVCodecContext*, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2936</i><br>
	 * @deprecated use the safer methods {@link #avcodec_string(java.nio.ByteBuffer, int, wrapffmpeg.AVCodecContext, int)} and {@link #avcodec_string(com.sun.jna.Pointer, int, wrapffmpeg.AVCodecContext, int)} instead
	 */
	@Deprecated 
	void avcodec_string(Pointer buf, int buf_size, AVCodecContext enc, int encode);
	/**
	 * Original signature : <code>void avcodec_string(char*, int, AVCodecContext*, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2936</i>
	 */
	void avcodec_string(ByteBuffer buf, int buf_size, AVCodecContext enc, int encode);
	/**
	 * Return a name for the specified profile, if available.<br>
	 * * @param codec the codec that is searched for the given profile<br>
	 * @param profile the profile value for which a name is requested<br>
	 * @return A name for the profile if found, NULL otherwise.<br>
	 * Original signature : <code>char* av_get_profile_name(const AVCodec*, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2944</i>
	 */
	String av_get_profile_name(AVCodec codec, int profile);
	/**
	 * Original signature : <code>int avcodec_default_execute(AVCodecContext*, avcodec_default_execute_func_callback*, void*, int*, int, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2946</i><br>
	 * @deprecated use the safer methods {@link #avcodec_default_execute(wrapffmpeg.AVCodecContext, wrapffmpeg.AvcodecLibrary.avcodec_default_execute_func_callback, com.sun.jna.Pointer, java.nio.IntBuffer, int, int)} and {@link #avcodec_default_execute(wrapffmpeg.AVCodecContext, wrapffmpeg.AvcodecLibrary.avcodec_default_execute_func_callback, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, int, int)} instead
	 */
	@Deprecated 
	int avcodec_default_execute(AVCodecContext c, AvcodecLibrary.avcodec_default_execute_func_callback func, Pointer arg, IntByReference ret, int count, int size);
	/**
	 * Original signature : <code>int avcodec_default_execute(AVCodecContext*, avcodec_default_execute_func_callback*, void*, int*, int, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2946</i>
	 */
	int avcodec_default_execute(AVCodecContext c, AvcodecLibrary.avcodec_default_execute_func_callback func, Pointer arg, IntBuffer ret, int count, int size);
	/**
	 * Original signature : <code>int avcodec_default_execute2(AVCodecContext*, avcodec_default_execute2_func_callback*, void*, int*, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2948</i><br>
	 * @deprecated use the safer methods {@link #avcodec_default_execute2(wrapffmpeg.AVCodecContext, wrapffmpeg.AvcodecLibrary.avcodec_default_execute2_func_callback, com.sun.jna.Pointer, java.nio.IntBuffer, int)} and {@link #avcodec_default_execute2(wrapffmpeg.AVCodecContext, wrapffmpeg.AvcodecLibrary.avcodec_default_execute2_func_callback, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	int avcodec_default_execute2(AVCodecContext c, AvcodecLibrary.avcodec_default_execute2_func_callback func, Pointer arg, IntByReference ret, int count);
	/**
	 * Original signature : <code>int avcodec_default_execute2(AVCodecContext*, avcodec_default_execute2_func_callback*, void*, int*, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2948</i>
	 */
	int avcodec_default_execute2(AVCodecContext c, AvcodecLibrary.avcodec_default_execute2_func_callback func, Pointer arg, IntBuffer ret, int count);
	/**
	 * Fill AVFrame audio data and linesize pointers.<br>
	 * * The buffer buf must be a preallocated buffer with a size big enough<br>
	 * to contain the specified samples amount. The filled AVFrame data<br>
	 * pointers will point to this buffer.<br>
	 * * AVFrame extended_data channel pointers are allocated if necessary for<br>
	 * planar audio.<br>
	 * * @param frame       the AVFrame<br>
	 *                    frame->nb_samples must be set prior to calling the<br>
	 *                    function. This function fills in frame->data,<br>
	 *                    frame->extended_data, frame->linesize[0].<br>
	 * @param nb_channels channel count<br>
	 * @param sample_fmt  sample format<br>
	 * @param buf         buffer to use for frame data<br>
	 * @param buf_size    size of buffer<br>
	 * @param align       plane size sample alignment (0 = default)<br>
	 * @return            >=0 on success, negative error code on failure<br>
	 * @todo return the size in bytes required to store the samples in<br>
	 * case of success, at the next libavutil bump<br>
	 * Original signature : <code>int avcodec_fill_audio_frame(AVFrame*, int, AVSampleFormat, const uint8_t*, int, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2970</i><br>
	 * @deprecated use the safer methods {@link #avcodec_fill_audio_frame(wrapffmpeg.AVFrame, int, int, java.nio.ByteBuffer, int, int)} and {@link #avcodec_fill_audio_frame(wrapffmpeg.AVFrame, int, int, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int avcodec_fill_audio_frame(AVFrame frame, int nb_channels, int sample_fmt, Pointer buf, int buf_size, int align);
	/**
	 * Fill AVFrame audio data and linesize pointers.<br>
	 * * The buffer buf must be a preallocated buffer with a size big enough<br>
	 * to contain the specified samples amount. The filled AVFrame data<br>
	 * pointers will point to this buffer.<br>
	 * * AVFrame extended_data channel pointers are allocated if necessary for<br>
	 * planar audio.<br>
	 * * @param frame       the AVFrame<br>
	 *                    frame->nb_samples must be set prior to calling the<br>
	 *                    function. This function fills in frame->data,<br>
	 *                    frame->extended_data, frame->linesize[0].<br>
	 * @param nb_channels channel count<br>
	 * @param sample_fmt  sample format<br>
	 * @param buf         buffer to use for frame data<br>
	 * @param buf_size    size of buffer<br>
	 * @param align       plane size sample alignment (0 = default)<br>
	 * @return            >=0 on success, negative error code on failure<br>
	 * @todo return the size in bytes required to store the samples in<br>
	 * case of success, at the next libavutil bump<br>
	 * Original signature : <code>int avcodec_fill_audio_frame(AVFrame*, int, AVSampleFormat, const uint8_t*, int, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2970</i>
	 */
	int avcodec_fill_audio_frame(AVFrame frame, int nb_channels, int sample_fmt, ByteBuffer buf, int buf_size, int align);
	/**
	 * Flush buffers, should be called when seeking or when switching to a different stream.<br>
	 * Original signature : <code>void avcodec_flush_buffers(AVCodecContext*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2975</i>
	 */
	void avcodec_flush_buffers(AVCodecContext avctx);
	/**
	 * Return codec bits per sample.<br>
	 * * @param[in] codec_id the codec<br>
	 * @return Number of bits per sample or zero if unknown for the given codec.<br>
	 * Original signature : <code>int av_get_bits_per_sample(AVCodecID)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2982</i>
	 */
	int av_get_bits_per_sample(int codec_id);
	/**
	 * Return the PCM codec associated with a sample format.<br>
	 * @param be  endianness, 0 for little, 1 for big,<br>
	 *            -1 (or anything else) for native<br>
	 * @return  AV_CODEC_ID_PCM_* or AV_CODEC_ID_NONE<br>
	 * Original signature : <code>AVCodecID av_get_pcm_codec(AVSampleFormat, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2990</i>
	 */
	int av_get_pcm_codec(int fmt, int be);
	/**
	 * Return codec bits per sample.<br>
	 * Only return non-zero if the bits per sample is exactly correct, not an<br>
	 * approximation.<br>
	 * * @param[in] codec_id the codec<br>
	 * @return Number of bits per sample or zero if unknown for the given codec.<br>
	 * Original signature : <code>int av_get_exact_bits_per_sample(AVCodecID)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:2999</i>
	 */
	int av_get_exact_bits_per_sample(int codec_id);
	/**
	 * Return audio frame duration.<br>
	 * * @param avctx        codec context<br>
	 * @param frame_bytes  size of the frame, or 0 if unknown<br>
	 * @return             frame duration, in samples, if known. 0 if not able to<br>
	 *                     determine.<br>
	 * Original signature : <code>int av_get_audio_frame_duration(AVCodecContext*, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3008</i>
	 */
	int av_get_audio_frame_duration(AVCodecContext avctx, int frame_bytes);
	/**
	 * Register a bitstream filter.<br>
	 * * The filter will be accessible to the application code through<br>
	 * av_bitstream_filter_next() or can be directly initialized with<br>
	 * av_bitstream_filter_init().<br>
	 * * @see avcodec_register_all()<br>
	 * Original signature : <code>void av_register_bitstream_filter(AVBitStreamFilter*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3032</i>
	 */
	void av_register_bitstream_filter(AVBitStreamFilter bsf);
	/**
	 * Create and initialize a bitstream filter context given a bitstream<br>
	 * filter name.<br>
	 * * The returned context must be freed with av_bitstream_filter_close().<br>
	 * * @param name    the name of the bitstream filter<br>
	 * @return a bitstream filter context if a matching filter was found<br>
	 * and successfully initialized, NULL otherwise<br>
	 * Original signature : <code>AVBitStreamFilterContext* av_bitstream_filter_init(const char*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3042</i><br>
	 * @deprecated use the safer methods {@link #av_bitstream_filter_init(java.lang.String)} and {@link #av_bitstream_filter_init(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	AVBitStreamFilterContext av_bitstream_filter_init(Pointer name);
	/**
	 * Create and initialize a bitstream filter context given a bitstream<br>
	 * filter name.<br>
	 * * The returned context must be freed with av_bitstream_filter_close().<br>
	 * * @param name    the name of the bitstream filter<br>
	 * @return a bitstream filter context if a matching filter was found<br>
	 * and successfully initialized, NULL otherwise<br>
	 * Original signature : <code>AVBitStreamFilterContext* av_bitstream_filter_init(const char*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3042</i>
	 */
	AVBitStreamFilterContext av_bitstream_filter_init(String name);
	/**
	 * Filter bitstream.<br>
	 * * This function filters the buffer buf with size buf_size, and places the<br>
	 * filtered buffer in the buffer pointed to by poutbuf.<br>
	 * * The output buffer must be freed by the caller.<br>
	 * * @param bsfc            bitstream filter context created by av_bitstream_filter_init()<br>
	 * @param avctx           AVCodecContext accessed by the filter, may be NULL.<br>
	 *                        If specified, this must point to the encoder context of the<br>
	 *                        output stream the packet is sent to.<br>
	 * @param args            arguments which specify the filter configuration, may be NULL<br>
	 * @param poutbuf         pointer which is updated to point to the filtered buffer<br>
	 * @param poutbuf_size    pointer which is updated to the filtered buffer size in bytes<br>
	 * @param buf             buffer containing the data to filter<br>
	 * @param buf_size        size in bytes of buf<br>
	 * @param keyframe        set to non-zero if the buffer to filter corresponds to a key-frame packet data<br>
	 * @return >= 0 in case of success, or a negative error code in case of failure<br>
	 * * If the return value is positive, an output buffer is allocated and<br>
	 * is availble in *poutbuf, and is distinct from the input buffer.<br>
	 * * If the return value is 0, the output buffer is not allocated and<br>
	 * should be considered identical to the input buffer, or in case<br>
	 * *poutbuf was set it points to the input buffer (not necessarily to<br>
	 * its starting address).<br>
	 * Original signature : <code>int av_bitstream_filter_filter(AVBitStreamFilterContext*, AVCodecContext*, const char*, uint8_t**, int*, const uint8_t*, int, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3067</i><br>
	 * @deprecated use the safer methods {@link #av_bitstream_filter_filter(wrapffmpeg.AVBitStreamFilterContext, wrapffmpeg.AVCodecContext, java.lang.String, com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, java.nio.ByteBuffer, int, int)} and {@link #av_bitstream_filter_filter(wrapffmpeg.AVBitStreamFilterContext, wrapffmpeg.AVCodecContext, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	int av_bitstream_filter_filter(AVBitStreamFilterContext bsfc, AVCodecContext avctx, Pointer args, PointerByReference poutbuf, IntByReference poutbuf_size, Pointer buf, int buf_size, int keyframe);
	/**
	 * Filter bitstream.<br>
	 * * This function filters the buffer buf with size buf_size, and places the<br>
	 * filtered buffer in the buffer pointed to by poutbuf.<br>
	 * * The output buffer must be freed by the caller.<br>
	 * * @param bsfc            bitstream filter context created by av_bitstream_filter_init()<br>
	 * @param avctx           AVCodecContext accessed by the filter, may be NULL.<br>
	 *                        If specified, this must point to the encoder context of the<br>
	 *                        output stream the packet is sent to.<br>
	 * @param args            arguments which specify the filter configuration, may be NULL<br>
	 * @param poutbuf         pointer which is updated to point to the filtered buffer<br>
	 * @param poutbuf_size    pointer which is updated to the filtered buffer size in bytes<br>
	 * @param buf             buffer containing the data to filter<br>
	 * @param buf_size        size in bytes of buf<br>
	 * @param keyframe        set to non-zero if the buffer to filter corresponds to a key-frame packet data<br>
	 * @return >= 0 in case of success, or a negative error code in case of failure<br>
	 * * If the return value is positive, an output buffer is allocated and<br>
	 * is availble in *poutbuf, and is distinct from the input buffer.<br>
	 * * If the return value is 0, the output buffer is not allocated and<br>
	 * should be considered identical to the input buffer, or in case<br>
	 * *poutbuf was set it points to the input buffer (not necessarily to<br>
	 * its starting address).<br>
	 * Original signature : <code>int av_bitstream_filter_filter(AVBitStreamFilterContext*, AVCodecContext*, const char*, uint8_t**, int*, const uint8_t*, int, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3067</i>
	 */
	int av_bitstream_filter_filter(AVBitStreamFilterContext bsfc, AVCodecContext avctx, String args, PointerByReference poutbuf, IntBuffer poutbuf_size, ByteBuffer buf, int buf_size, int keyframe);
	/**
	 * Release bitstream filter context.<br>
	 * * @param bsf the bitstream filter context created with<br>
	 * av_bitstream_filter_init(), can be NULL<br>
	 * Original signature : <code>void av_bitstream_filter_close(AVBitStreamFilterContext*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3074</i>
	 */
	void av_bitstream_filter_close(AVBitStreamFilterContext bsf);
	/**
	 * If f is NULL, return the first registered bitstream filter,<br>
	 * if f is non-NULL, return the next registered bitstream filter<br>
	 * after f, or NULL if f is the last one.<br>
	 * * This function can be used to iterate over all registered bitstream<br>
	 * filters.<br>
	 * Original signature : <code>AVBitStreamFilter* av_bitstream_filter_next(AVBitStreamFilter*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3083</i>
	 */
	AVBitStreamFilter av_bitstream_filter_next(AVBitStreamFilter f);
	/**
	 * Reallocate the given block if it is not large enough, otherwise do nothing.<br>
	 * * @see av_realloc<br>
	 * Original signature : <code>void* av_fast_realloc(void*, unsigned int*, size_t)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3089</i><br>
	 * @deprecated use the safer methods {@link #av_fast_realloc(com.sun.jna.Pointer, java.nio.IntBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #av_fast_realloc(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	Pointer av_fast_realloc(Pointer ptr, IntByReference size, NativeSize min_size);
	/**
	 * Reallocate the given block if it is not large enough, otherwise do nothing.<br>
	 * * @see av_realloc<br>
	 * Original signature : <code>void* av_fast_realloc(void*, unsigned int*, size_t)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3089</i>
	 */
	Pointer av_fast_realloc(Pointer ptr, IntBuffer size, NativeSize min_size);
	/**
	 * Allocate a buffer, reusing the given one if large enough.<br>
	 * * Contrary to av_fast_realloc the current buffer contents might not be<br>
	 * preserved and on error the old buffer is freed, thus no special<br>
	 * handling to avoid memleaks is necessary.<br>
	 * * @param ptr pointer to pointer to already allocated buffer, overwritten with pointer to new buffer<br>
	 * @param size size of the buffer *ptr points to<br>
	 * @param min_size minimum size of *ptr buffer after returning, *ptr will be NULL and<br>
	 *                 *size 0 if an error occurred.<br>
	 * Original signature : <code>void av_fast_malloc(void*, unsigned int*, size_t)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3101</i><br>
	 * @deprecated use the safer methods {@link #av_fast_malloc(com.sun.jna.Pointer, java.nio.IntBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #av_fast_malloc(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	void av_fast_malloc(Pointer ptr, IntByReference size, NativeSize min_size);
	/**
	 * Allocate a buffer, reusing the given one if large enough.<br>
	 * * Contrary to av_fast_realloc the current buffer contents might not be<br>
	 * preserved and on error the old buffer is freed, thus no special<br>
	 * handling to avoid memleaks is necessary.<br>
	 * * @param ptr pointer to pointer to already allocated buffer, overwritten with pointer to new buffer<br>
	 * @param size size of the buffer *ptr points to<br>
	 * @param min_size minimum size of *ptr buffer after returning, *ptr will be NULL and<br>
	 *                 *size 0 if an error occurred.<br>
	 * Original signature : <code>void av_fast_malloc(void*, unsigned int*, size_t)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3101</i>
	 */
	void av_fast_malloc(Pointer ptr, IntBuffer size, NativeSize min_size);
	/**
	 * Same behaviour av_fast_malloc but the buffer has additional<br>
	 * FF_INPUT_BUFFER_PADDING_SIZE at the end which will always be 0.<br>
	 * * In addition the whole buffer will initially and after resizes<br>
	 * be 0-initialized so that no uninitialized data will ever appear.<br>
	 * Original signature : <code>void av_fast_padded_malloc(void*, unsigned int*, size_t)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3109</i><br>
	 * @deprecated use the safer methods {@link #av_fast_padded_malloc(com.sun.jna.Pointer, java.nio.IntBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #av_fast_padded_malloc(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	void av_fast_padded_malloc(Pointer ptr, IntByReference size, NativeSize min_size);
	/**
	 * Same behaviour av_fast_malloc but the buffer has additional<br>
	 * FF_INPUT_BUFFER_PADDING_SIZE at the end which will always be 0.<br>
	 * * In addition the whole buffer will initially and after resizes<br>
	 * be 0-initialized so that no uninitialized data will ever appear.<br>
	 * Original signature : <code>void av_fast_padded_malloc(void*, unsigned int*, size_t)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3109</i>
	 */
	void av_fast_padded_malloc(Pointer ptr, IntBuffer size, NativeSize min_size);
	/**
	 * Same behaviour av_fast_padded_malloc except that buffer will always<br>
	 * be 0-initialized after call.<br>
	 * Original signature : <code>void av_fast_padded_mallocz(void*, unsigned int*, size_t)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3115</i><br>
	 * @deprecated use the safer methods {@link #av_fast_padded_mallocz(com.sun.jna.Pointer, java.nio.IntBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #av_fast_padded_mallocz(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	void av_fast_padded_mallocz(Pointer ptr, IntByReference size, NativeSize min_size);
	/**
	 * Same behaviour av_fast_padded_malloc except that buffer will always<br>
	 * be 0-initialized after call.<br>
	 * Original signature : <code>void av_fast_padded_mallocz(void*, unsigned int*, size_t)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3115</i>
	 */
	void av_fast_padded_mallocz(Pointer ptr, IntBuffer size, NativeSize min_size);
	/**
	 * Encode extradata length to a buffer. Used by xiph codecs.<br>
	 * * @param s buffer to write to; must be at least (v/255+1) bytes long<br>
	 * @param v size of extradata in bytes<br>
	 * @return number of bytes written to the buffer.<br>
	 * Original signature : <code>int av_xiphlacing(unsigned char*, unsigned int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3123</i><br>
	 * @deprecated use the safer methods {@link #av_xiphlacing(java.nio.ByteBuffer, int)} and {@link #av_xiphlacing(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int av_xiphlacing(Pointer s, int v);
	/**
	 * Encode extradata length to a buffer. Used by xiph codecs.<br>
	 * * @param s buffer to write to; must be at least (v/255+1) bytes long<br>
	 * @param v size of extradata in bytes<br>
	 * @return number of bytes written to the buffer.<br>
	 * Original signature : <code>int av_xiphlacing(unsigned char*, unsigned int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3123</i>
	 */
	int av_xiphlacing(ByteBuffer s, int v);
	/**
	 * Original signature : <code>void av_log_missing_feature(void*, const char*, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3125</i><br>
	 * @deprecated use the safer methods {@link #av_log_missing_feature(com.sun.jna.Pointer, java.lang.String, int)} and {@link #av_log_missing_feature(com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	void av_log_missing_feature(Pointer avc, Pointer feature, int want_sample);
	/**
	 * Original signature : <code>void av_log_missing_feature(void*, const char*, int)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3125</i>
	 */
	void av_log_missing_feature(Pointer avc, String feature, int want_sample);
	/**
	 * Original signature : <code>void av_log_ask_for_sample(void*, const char*, null)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3127</i><br>
	 * @deprecated use the safer methods {@link #av_log_ask_for_sample(com.sun.jna.Pointer, java.lang.String, java.lang.Object)} and {@link #av_log_ask_for_sample(com.sun.jna.Pointer, com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	void av_log_ask_for_sample(Pointer avc, Pointer msg, Object... varargs);
	/**
	 * Original signature : <code>void av_log_ask_for_sample(void*, const char*, null)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3127</i>
	 */
	void av_log_ask_for_sample(Pointer avc, String msg, Object... varargs);
	/**
	 * Register the hardware accelerator hwaccel.<br>
	 * Original signature : <code>void av_register_hwaccel(AVHWAccel*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3132</i>
	 */
	void av_register_hwaccel(AVHWAccel hwaccel);
	/**
	 * If hwaccel is NULL, returns the first registered hardware accelerator,<br>
	 * if hwaccel is non-NULL, returns the next registered hardware accelerator<br>
	 * after hwaccel, or NULL if hwaccel is the last one.<br>
	 * Original signature : <code>AVHWAccel* av_hwaccel_next(AVHWAccel*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3139</i>
	 */
	AVHWAccel av_hwaccel_next(AVHWAccel hwaccel);
	/**
	 * Register a user provided lock manager supporting the operations<br>
	 * specified by AVLockOp. mutex points to a (void *) where the<br>
	 * lockmgr should store/get a pointer to a user allocated mutex. It's<br>
	 * NULL upon AV_LOCK_CREATE and != NULL for all other ops.<br>
	 * * @param cb User defined callback. Note: FFmpeg may invoke calls to this<br>
	 *           callback during the call to av_lockmgr_register().<br>
	 *           Thus, the application must be prepared to handle that.<br>
	 *           If cb is set to NULL the lockmgr will be unregistered.<br>
	 *           Also note that during unregistration the previously registered<br>
	 *           lockmgr callback may also be invoked.<br>
	 * Original signature : <code>int av_lockmgr_register(av_lockmgr_register_cb_callback*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3164</i>
	 */
	int av_lockmgr_register(AvcodecLibrary.av_lockmgr_register_cb_callback cb);
	/**
	 * Get the type of the given codec.<br>
	 * Original signature : <code>AVMediaType avcodec_get_type(AVCodecID)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3169</i>
	 */
	int avcodec_get_type(int codec_id);
	/**
	 * Get the name of a codec.<br>
	 * @return  a static string identifying the codec; never NULL<br>
	 * Original signature : <code>char* avcodec_get_name(AVCodecID)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3175</i>
	 */
	String avcodec_get_name(int id);
	/**
	 * @return a positive value if s is open (i.e. avcodec_open2() was called on it<br>
	 * with no corresponding avcodec_close()), 0 otherwise.<br>
	 * Original signature : <code>int avcodec_is_open(AVCodecContext*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3181</i>
	 */
	int avcodec_is_open(AVCodecContext s);
	/**
	 * @return a non-zero number if codec is an encoder, zero otherwise<br>
	 * Original signature : <code>int av_codec_is_encoder(const AVCodec*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3186</i>
	 */
	int av_codec_is_encoder(AVCodec codec);
	/**
	 * @return a non-zero number if codec is a decoder, zero otherwise<br>
	 * Original signature : <code>int av_codec_is_decoder(const AVCodec*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3191</i>
	 */
	int av_codec_is_decoder(AVCodec codec);
	/**
	 * @return descriptor for given codec ID or NULL if no descriptor exists.<br>
	 * Original signature : <code>AVCodecDescriptor* avcodec_descriptor_get(AVCodecID)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3196</i>
	 */
	AVCodecDescriptor avcodec_descriptor_get(int id);
	/**
	 * Iterate over all codec descriptors known to libavcodec.<br>
	 * * @param prev previous descriptor. NULL to get the first descriptor.<br>
	 * * @return next descriptor or NULL after the last descriptor<br>
	 * Original signature : <code>AVCodecDescriptor* avcodec_descriptor_next(const AVCodecDescriptor*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3203</i>
	 */
	AVCodecDescriptor avcodec_descriptor_next(AVCodecDescriptor prev);
	/**
	 * @return codec descriptor with the given name or NULL if no such descriptor<br>
	 *         exists.<br>
	 * Original signature : <code>AVCodecDescriptor* avcodec_descriptor_get_by_name(const char*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3209</i><br>
	 * @deprecated use the safer methods {@link #avcodec_descriptor_get_by_name(java.lang.String)} and {@link #avcodec_descriptor_get_by_name(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	AVCodecDescriptor avcodec_descriptor_get_by_name(Pointer name);
	/**
	 * @return codec descriptor with the given name or NULL if no such descriptor<br>
	 *         exists.<br>
	 * Original signature : <code>AVCodecDescriptor* avcodec_descriptor_get_by_name(const char*)</code><br>
	 * <i>native declaration : libavcodec/avcodec.h:3209</i>
	 */
	AVCodecDescriptor avcodec_descriptor_get_by_name(String name);
	public static class AVCodecInternal extends PointerType {
		public AVCodecInternal(Pointer address) {
			super(address);
		}
		public AVCodecInternal() {
			super();
		}
	};
	public static class AVCodecDefault extends PointerType {
		public AVCodecDefault(Pointer address) {
			super(address);
		}
		public AVCodecDefault() {
			super();
		}
	};
	public static class AVResampleContext extends PointerType {
		public AVResampleContext(Pointer address) {
			super(address);
		}
		public AVResampleContext() {
			super();
		}
	};
	public static class ReSampleContext extends PointerType {
		public ReSampleContext(Pointer address) {
			super(address);
		}
		public ReSampleContext() {
			super();
		}
	};
}
