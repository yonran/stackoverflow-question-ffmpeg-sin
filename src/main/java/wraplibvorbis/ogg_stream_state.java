package wraplibvorbis;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : ogg/ogg.h:44</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ogg_stream_state extends Structure {
	/**
	 * bytes from packet bodies<br>
	 * C type : unsigned char*
	 */
	public Pointer body_data;
	/** storage elements allocated */
	public NativeLong body_storage;
	/** elements stored; fill mark */
	public NativeLong body_fill;
	/** elements of fill returned */
	public NativeLong body_returned;
	/**
	 * The values that will go to the segment table<br>
	 * C type : int*
	 */
	public IntByReference lacing_vals;
	/**
	 * granulepos values for headers. Not compact<br>
	 * this way, but it is simple coupled to the<br>
	 * lacing fifo<br>
	 * C type : ogg_int64_t*
	 */
	public LongByReference granule_vals;
	public NativeLong lacing_storage;
	public NativeLong lacing_fill;
	public NativeLong lacing_packet;
	public NativeLong lacing_returned;
	/**
	 * working space for header encode<br>
	 * C type : unsigned char[282]
	 */
	public byte[] header = new byte[282];
	public int header_fill;
	/**
	 * set when we have buffered the last packet in the<br>
	 * logical bitstream
	 */
	public int e_o_s;
	/**
	 * set after we've written the initial page<br>
	 * of a logical bitstream
	 */
	public int b_o_s;
	public NativeLong serialno;
	public NativeLong pageno;
	/**
	 * sequence number for decode; the framing<br>
	 * knows where there's a hole in the data,<br>
	 * but we need coupling so that the codec<br>
	 * (which is in a separate abstraction<br>
	 * layer) also knows about the gap<br>
	 * C type : ogg_int64_t
	 */
	public long packetno;
	/** C type : ogg_int64_t */
	public long granulepos;
	public ogg_stream_state() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("body_data", "body_storage", "body_fill", "body_returned", "lacing_vals", "granule_vals", "lacing_storage", "lacing_fill", "lacing_packet", "lacing_returned", "header", "header_fill", "e_o_s", "b_o_s", "serialno", "pageno", "packetno", "granulepos");
	}
	public static class ByReference extends ogg_stream_state implements Structure.ByReference {
		
	};
	public static class ByValue extends ogg_stream_state implements Structure.ByValue {
		
	};
}
