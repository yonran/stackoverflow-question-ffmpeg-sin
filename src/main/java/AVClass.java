

import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : /usr/include/libavutil/log.h:3089</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class AVClass extends Structure {
	/**
	 * The name of the class; usually it is the same name as the<br>
	 * context structure type to which the AVClass is associated.<br>
	 * C type : const char*
	 */
	public Pointer class_name;
	/**
	 * A pointer to a function which returns the name of a context<br>
	 * instance ctx associated with the class.<br>
	 * C type : item_name_callback*
	 */
	public AVClass.item_name_callback item_name;
	/**
	 * a pointer to the first option specified in the class if any or NULL<br>
	 * * @see av_set_default_options()<br>
	 * C type : AVOption*
	 */
	public AvutilLibrary.AVOption option;
	public int version;
	/**
	 * Offset in the structure where log_level_offset is stored.<br>
	 * 0 means there is no such variable
	 */
	public int log_level_offset_offset;
	/**
	 * Offset in the structure where a pointer to the parent context for loging is stored.<br>
	 * for example a decoder that uses eval.c could pass its AVCodecContext to eval as such<br>
	 * parent context. And a av_log() implementation could then display the parent context<br>
	 * can be NULL of course
	 */
	public int parent_log_context_offset;
	/**
	 * Return next AVOptions-enabled child or NULL<br>
	 * C type : child_next_callback*
	 */
	public AVClass.child_next_callback child_next;
	/**
	 * Return an AVClass corresponding to next potential<br>
	 * AVOptions-enabled child.<br>
	 * * The difference between child_next and this is that<br>
	 * child_next iterates over _already existing_ objects, while<br>
	 * child_class_next iterates over _all possible_ children.<br>
	 * C type : child_class_next_callback*
	 */
	public AVClass.child_class_next_callback child_class_next;
	/** <i>native declaration : /usr/include/libavutil/log.h:3086</i> */
	public interface item_name_callback extends Callback {
		String apply(Pointer ctx);
	};
	/** <i>native declaration : /usr/include/libavutil/log.h:3087</i> */
	public interface child_next_callback extends Callback {
		Pointer apply(Pointer obj, Pointer prev);
	};
	/** <i>native declaration : /usr/include/libavutil/log.h:3088</i> */
	public interface child_class_next_callback extends Callback {
		AVClass apply(AVClass prev);
	};
	public AVClass() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("class_name", "item_name", "option", "version", "log_level_offset_offset", "parent_log_context_offset", "child_next", "child_class_next");
	}
	/**
	 * @param class_name The name of the class; usually it is the same name as the<br>
	 * context structure type to which the AVClass is associated.<br>
	 * C type : const char*<br>
	 * @param item_name A pointer to a function which returns the name of a context<br>
	 * instance ctx associated with the class.<br>
	 * C type : item_name_callback*<br>
	 * @param option a pointer to the first option specified in the class if any or NULL<br>
	 * * @see av_set_default_options()<br>
	 * C type : AVOption*<br>
	 * @param log_level_offset_offset Offset in the structure where log_level_offset is stored.<br>
	 * 0 means there is no such variable<br>
	 * @param parent_log_context_offset Offset in the structure where a pointer to the parent context for loging is stored.<br>
	 * for example a decoder that uses eval.c could pass its AVCodecContext to eval as such<br>
	 * parent context. And a av_log() implementation could then display the parent context<br>
	 * can be NULL of course<br>
	 * @param child_next Return next AVOptions-enabled child or NULL<br>
	 * C type : child_next_callback*<br>
	 * @param child_class_next Return an AVClass corresponding to next potential<br>
	 * AVOptions-enabled child.<br>
	 * * The difference between child_next and this is that<br>
	 * child_next iterates over _already existing_ objects, while<br>
	 * child_class_next iterates over _all possible_ children.<br>
	 * C type : child_class_next_callback*
	 */
	public AVClass(Pointer class_name, AVClass.item_name_callback item_name, AvutilLibrary.AVOption option, int version, int log_level_offset_offset, int parent_log_context_offset, AVClass.child_next_callback child_next, AVClass.child_class_next_callback child_class_next) {
		super();
		this.class_name = class_name;
		this.item_name = item_name;
		this.option = option;
		this.version = version;
		this.log_level_offset_offset = log_level_offset_offset;
		this.parent_log_context_offset = parent_log_context_offset;
		this.child_next = child_next;
		this.child_class_next = child_class_next;
	}
	public static class ByReference extends AVClass implements Structure.ByReference {
		
	};
	public static class ByValue extends AVClass implements Structure.ByValue {
		
	};
}
