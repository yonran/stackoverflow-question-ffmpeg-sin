package wrapffmpeg;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.LongByReference;
import com.sun.jna.ptr.PointerByReference;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : libavformat/avformat.h:116</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class AVOutputFormat extends Structure {
	/** C type : const char* */
	public String name;
	/**
	 * Descriptive name for the format, meant to be more human-readable<br>
	 * than name. You should use the NULL_IF_CONFIG_SMALL() macro<br>
	 * to define it.<br>
	 * C type : const char*
	 */
	public String long_name;
	/** C type : const char* */
	public Pointer mime_type;
	/**
	 * < comma-separated filename extensions<br>
	 * C type : const char*
	 */
	public Pointer extensions;
	/**
	 * output support<br>
	 * @see wrapffmpeg.AvcodecLibrary#AVCodecID<br>
	 * < default audio codec<br>
	 * C type : AVCodecID
	 */
	public int audio_codec;
	/**
	 * @see wrapffmpeg.AvcodecLibrary#AVCodecID<br>
	 * < default video codec<br>
	 * C type : AVCodecID
	 */
	public int video_codec;
	/**
	 * @see wrapffmpeg.AvcodecLibrary#AVCodecID<br>
	 * < default subtitle codec<br>
	 * C type : AVCodecID
	 */
	public int subtitle_codec;
	/**
	 * can use flags: AVFMT_NOFILE, AVFMT_NEEDNUMBER, AVFMT_RAWPICTURE,<br>
	 * AVFMT_GLOBALHEADER, AVFMT_NOTIMESTAMPS, AVFMT_VARIABLE_FPS,<br>
	 * AVFMT_NODIMENSIONS, AVFMT_NOSTREAMS, AVFMT_ALLOW_FLUSH,<br>
	 * AVFMT_TS_NONSTRICT
	 */
	public int flags;
	/**
	 * List of supported codec_id-codec_tag pairs, ordered by "better<br>
	 * choice first". The arrays are all terminated by AV_CODEC_ID_NONE.<br>
	 * C type : AVCodecTag**
	 */
	public PointerByReference codec_tag;
	/**
	 * < AVClass for the private context<br>
	 * C type : const AVClass*
	 */
	public wrapffmpeg.AVClass.ByReference priv_class;
	/**
	 * No fields below this line are part of the public API. They<br>
	 * may not be used outside of libavformat and can be changed and<br>
	 * removed at will.<br>
	 * New public fields should be added right above.<br>
	 * ****************************************************************<br>
	 * C type : AVOutputFormat*
	 */
	public AVOutputFormat.ByReference next;
	/** size of private data so that it can be allocated in the wrapper */
	public int priv_data_size;
	/** C type : write_header_callback* */
	public AVOutputFormat.write_header_callback write_header;
	/**
	 * Write a packet. If AVFMT_ALLOW_FLUSH is set in flags,<br>
	 * pkt can be NULL in order to flush data buffered in the muxer.<br>
	 * When flushing, return 0 if there still is more data to flush,<br>
	 * or 1 if everything was flushed and there is no more buffered<br>
	 * data.<br>
	 * C type : write_packet_callback*
	 */
	public AVOutputFormat.write_packet_callback write_packet;
	/** C type : write_trailer_callback* */
	public AVOutputFormat.write_trailer_callback write_trailer;
	/**
	 * Currently only used to set pixel format if not YUV420P.<br>
	 * C type : interleave_packet_callback*
	 */
	public AVOutputFormat.interleave_packet_callback interleave_packet;
	/**
	 * Test if the given codec can be stored in this container.<br>
	 * * @return 1 if the codec is supported, 0 if it is not.<br>
	 *         A negative number if unknown.<br>
	 *         MKTAG('A', 'P', 'I', 'C') if the codec is only supported as AV_DISPOSITION_ATTACHED_PIC<br>
	 * C type : query_codec_callback*
	 */
	public AVOutputFormat.query_codec_callback query_codec;
	/** C type : get_output_timestamp_callback* */
	public AVOutputFormat.get_output_timestamp_callback get_output_timestamp;
	/** <i>native declaration : libavformat/avformat.h:108</i> */
	public interface write_header_callback extends Callback {
		int apply(AVFormatContext AVFormatContextPtr1);
	};
	/** <i>native declaration : libavformat/avformat.h:109</i> */
	public interface write_packet_callback extends Callback {
		int apply(AVFormatContext AVFormatContextPtr1, AVPacket pkt);
	};
	/** <i>native declaration : libavformat/avformat.h:110</i> */
	public interface write_trailer_callback extends Callback {
		int apply(AVFormatContext AVFormatContextPtr1);
	};
	/** <i>native declaration : libavformat/avformat.h:111</i> */
	public interface interleave_packet_callback extends Callback {
		int apply(AVFormatContext AVFormatContextPtr1, AVPacket out, AVPacket in, int flush);
	};
	/** <i>native declaration : libavformat/avformat.h:114</i> */
	public interface query_codec_callback extends Callback {
		int apply(int id, int std_compliance);
	};
	/** <i>native declaration : libavformat/avformat.h:115</i> */
	public interface get_output_timestamp_callback extends Callback {
		void apply(AVFormatContext s, int stream, LongByReference dts, LongByReference wall);
	};
	public AVOutputFormat() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("name", "long_name", "mime_type", "extensions", "audio_codec", "video_codec", "subtitle_codec", "flags", "codec_tag", "priv_class", "next", "priv_data_size", "write_header", "write_packet", "write_trailer", "interleave_packet", "query_codec", "get_output_timestamp");
	}
	public static class ByReference extends AVOutputFormat implements Structure.ByReference {
		
	};
	public static class ByValue extends AVOutputFormat implements Structure.ByValue {
		
	};
}
