package wraplibvorbis;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : /home/yonran/Downloads/libvorbis-1.3.3/include/vorbis/codec.h:83</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class vorbis_comment extends Structure {
	/**
	 * unlimited user comment fields.  libvorbis writes 'libvorbis'<br>
	 * whatever vendor is set to in encode<br>
	 * C type : char**
	 */
	public Pointer user_comments;
	/** C type : int* */
	public Pointer comment_lengths;
	public int comments;
	/** C type : char* */
	public Pointer vendor;
	public vorbis_comment() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("user_comments", "comment_lengths", "comments", "vendor");
	}
	/**
	 * @param user_comments unlimited user comment fields.  libvorbis writes 'libvorbis'<br>
	 * whatever vendor is set to in encode<br>
	 * C type : char**<br>
	 * @param comment_lengths C type : int*<br>
	 * @param vendor C type : char*
	 */
	public vorbis_comment(PointerByReference user_comments, IntByReference comment_lengths, int comments, Pointer vendor) {
		super();
		this.user_comments = user_comments;
		this.comment_lengths = comment_lengths;
		this.comments = comments;
		this.vendor = vendor;
	}
	public static class ByReference extends vorbis_comment implements Structure.ByReference {
		
	};
	public static class ByValue extends vorbis_comment implements Structure.ByValue {
		
	};
}
