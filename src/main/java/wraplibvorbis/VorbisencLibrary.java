package wraplibvorbis;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
/**
 * JNA Wrapper for library <b>vorbisenc</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface VorbisencLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = "vorbisenc";
//	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(VorbisencLibrary.JNA_LIBRARY_NAME);
//	public static final VorbisencLibrary INSTANCE = (VorbisencLibrary)Native.loadLibrary(VorbisencLibrary.JNA_LIBRARY_NAME, VorbisencLibrary.class);
	/** <i>native declaration : /home/yonran/Downloads/libvorbis-1.3.3/include/vorbis/vorbisenc.h</i> */
	public static final int OV_ECTL_RATEMANAGE_GET = (int)0x10;
	/** <i>native declaration : /home/yonran/Downloads/libvorbis-1.3.3/include/vorbis/vorbisenc.h</i> */
	public static final int OV_ECTL_LOWPASS_SET = (int)0x21;
	/** <i>native declaration : /home/yonran/Downloads/libvorbis-1.3.3/include/vorbis/vorbisenc.h</i> */
	public static final int OV_ECTL_RATEMANAGE_AVG = (int)0x12;
	/** <i>native declaration : /home/yonran/Downloads/libvorbis-1.3.3/include/vorbis/vorbisenc.h</i> */
	public static final int OV_ECTL_RATEMANAGE_SET = (int)0x11;
	/** <i>native declaration : /home/yonran/Downloads/libvorbis-1.3.3/include/vorbis/vorbisenc.h</i> */
	public static final int OV_ECTL_IBLOCK_SET = (int)0x31;
	/** <i>native declaration : /home/yonran/Downloads/libvorbis-1.3.3/include/vorbis/vorbisenc.h</i> */
	public static final int OV_ECTL_RATEMANAGE2_SET = (int)0x15;
	/** <i>native declaration : /home/yonran/Downloads/libvorbis-1.3.3/include/vorbis/vorbisenc.h</i> */
	public static final int OV_ECTL_RATEMANAGE2_GET = (int)0x14;
	/** <i>native declaration : /home/yonran/Downloads/libvorbis-1.3.3/include/vorbis/vorbisenc.h</i> */
	public static final int OV_ECTL_COUPLING_SET = (int)0x41;
	/** <i>native declaration : /home/yonran/Downloads/libvorbis-1.3.3/include/vorbis/vorbisenc.h</i> */
	public static final int OV_ECTL_RATEMANAGE_HARD = (int)0x13;
	/** <i>native declaration : /home/yonran/Downloads/libvorbis-1.3.3/include/vorbis/vorbisenc.h</i> */
	public static final int OV_ECTL_IBLOCK_GET = (int)0x30;
	/** <i>native declaration : /home/yonran/Downloads/libvorbis-1.3.3/include/vorbis/vorbisenc.h</i> */
	public static final int OV_ECTL_LOWPASS_GET = (int)0x20;
	/** <i>native declaration : /home/yonran/Downloads/libvorbis-1.3.3/include/vorbis/vorbisenc.h</i> */
	public static final int OV_ECTL_COUPLING_GET = (int)0x40;
	/**
	 * This is the primary function within libvorbisenc for setting up managed<br>
	 * bitrate modes.<br>
	 * * Before this function is called, the \ref vorbis_info<br>
	 * struct should be initialized by using vorbis_info_init() from the libvorbis<br>
	 * API.  After encoding, vorbis_info_clear() should be called.<br>
	 * * The max_bitrate, nominal_bitrate, and min_bitrate settings are used to set<br>
	 * constraints for the encoded file.  This function uses these settings to<br>
	 * select the appropriate encoding mode and set it up.<br>
	 * * \param vi               Pointer to an initialized \ref vorbis_info struct.<br>
	 * \param channels         The number of channels to be encoded.<br>
	 * \param rate             The sampling rate of the source audio.<br>
	 * \param max_bitrate      Desired maximum bitrate (limit). -1 indicates unset.<br>
	 * \param nominal_bitrate  Desired average, or central, bitrate. -1 indicates unset.<br>
	 * \param min_bitrate      Desired minimum bitrate. -1 indicates unset.<br>
	 * * \return Zero for success, and negative values for failure.<br>
	 * * \retval 0          Success.<br>
	 * \retval OV_EFAULT  Internal logic fault; indicates a bug or heap/stack corruption.<br>
	 * \retval OV_EINVAL  Invalid setup request, eg, out of range argument.<br>
	 * \retval OV_EIMPL   Unimplemented mode; unable to comply with bitrate request.<br>
	 * Original signature : <code>int vorbis_encode_init(vorbis_info*, long, long, long, long, long)</code><br>
	 * <i>native declaration : /home/yonran/Downloads/libvorbis-1.3.3/include/vorbis/vorbisenc.h:22</i>
	 */
	int vorbis_encode_init(vorbis_info vi, NativeLong channels, NativeLong rate, NativeLong max_bitrate, NativeLong nominal_bitrate, NativeLong min_bitrate);
	/**
	 * This function performs step-one of a three-step bitrate-managed encode<br>
	 * setup.  It functions similarly to the one-step setup performed by \ref<br>
	 * vorbis_encode_init but allows an application to make further encode setup<br>
	 * tweaks using \ref vorbis_encode_ctl before finally calling \ref<br>
	 * vorbis_encode_setup_init to complete the setup process.<br>
	 * * Before this function is called, the \ref vorbis_info struct should be<br>
	 * initialized by using vorbis_info_init() from the libvorbis API.  After<br>
	 * encoding, vorbis_info_clear() should be called.<br>
	 * * The max_bitrate, nominal_bitrate, and min_bitrate settings are used to set<br>
	 * constraints for the encoded file.  This function uses these settings to<br>
	 * select the appropriate encoding mode and set it up.<br>
	 * * \param vi                Pointer to an initialized vorbis_info struct.<br>
	 * \param channels          The number of channels to be encoded.<br>
	 * \param rate              The sampling rate of the source audio.<br>
	 * \param max_bitrate       Desired maximum bitrate (limit). -1 indicates unset.<br>
	 * \param nominal_bitrate   Desired average, or central, bitrate. -1 indicates unset.<br>
	 * \param min_bitrate       Desired minimum bitrate. -1 indicates unset.<br>
	 * * \return Zero for success, and negative for failure.<br>
	 * * \retval 0           Success<br>
	 * \retval OV_EFAULT   Internal logic fault; indicates a bug or heap/stack corruption.<br>
	 * \retval OV_EINVAL   Invalid setup request, eg, out of range argument.<br>
	 * \retval OV_EIMPL    Unimplemented mode; unable to comply with bitrate request.<br>
	 * Original signature : <code>int vorbis_encode_setup_managed(vorbis_info*, long, long, long, long, long)</code><br>
	 * <i>native declaration : /home/yonran/Downloads/libvorbis-1.3.3/include/vorbis/vorbisenc.h:48</i>
	 */
	int vorbis_encode_setup_managed(vorbis_info vi, NativeLong channels, NativeLong rate, NativeLong max_bitrate, NativeLong nominal_bitrate, NativeLong min_bitrate);
	/**
	 * This function performs step-one of a three-step variable bitrate<br>
	 * (quality-based) encode setup.  It functions similarly to the one-step setup<br>
	 * performed by \ref vorbis_encode_init_vbr() but allows an application to<br>
	 * make further encode setup tweaks using \ref vorbis_encode_ctl() before<br>
	 * finally calling \ref vorbis_encode_setup_init to complete the setup<br>
	 * process.<br>
	 * * Before this function is called, the \ref vorbis_info struct should be<br>
	 * initialized by using \ref vorbis_info_init() from the libvorbis API.  After<br>
	 * encoding, vorbis_info_clear() should be called.<br>
	 * * \param vi        Pointer to an initialized vorbis_info struct.<br>
	 * \param channels  The number of channels to be encoded.<br>
	 * \param rate      The sampling rate of the source audio.<br>
	 * \param quality   Desired quality level, currently from -0.1 to 1.0 (lo to hi).<br>
	 * * \return Zero for success, and negative values for failure.<br>
	 * * \retval  0          Success<br>
	 * \retval  OV_EFAULT  Internal logic fault; indicates a bug or heap/stack corruption.<br>
	 * \retval  OV_EINVAL  Invalid setup request, eg, out of range argument.<br>
	 * \retval  OV_EIMPL   Unimplemented mode; unable to comply with quality level request.<br>
	 * Original signature : <code>int vorbis_encode_setup_vbr(vorbis_info*, long, long, float)</code><br>
	 * <i>native declaration : /home/yonran/Downloads/libvorbis-1.3.3/include/vorbis/vorbisenc.h:70</i>
	 */
	int vorbis_encode_setup_vbr(vorbis_info vi, NativeLong channels, NativeLong rate, float quality);
	/**
	 * This is the primary function within libvorbisenc for setting up variable<br>
	 * bitrate ("quality" based) modes.<br>
	 * *<br>
	 * Before this function is called, the vorbis_info struct should be<br>
	 * initialized by using vorbis_info_init() from the libvorbis API. After<br>
	 * encoding, vorbis_info_clear() should be called.<br>
	 * * \param vi           Pointer to an initialized vorbis_info struct.<br>
	 * \param channels     The number of channels to be encoded.<br>
	 * \param rate         The sampling rate of the source audio.<br>
	 * \param base_quality Desired quality level, currently from -0.1 to 1.0 (lo to hi).<br>
	 * *<br>
	 * \return Zero for success, or a negative number for failure.<br>
	 * * \retval 0           Success<br>
	 * \retval OV_EFAULT   Internal logic fault; indicates a bug or heap/stack corruption.<br>
	 * \retval OV_EINVAL   Invalid setup request, eg, out of range argument.<br>
	 * \retval OV_EIMPL    Unimplemented mode; unable to comply with quality level request.<br>
	 * Original signature : <code>int vorbis_encode_init_vbr(vorbis_info*, long, long, float)</code><br>
	 * <i>native declaration : /home/yonran/Downloads/libvorbis-1.3.3/include/vorbis/vorbisenc.h:90</i>
	 */
	int vorbis_encode_init_vbr(vorbis_info vi, NativeLong channels, NativeLong rate, float base_quality);
	/**
	 * This function performs the last stage of three-step encoding setup, as<br>
	 * described in the API overview under managed bitrate modes.<br>
	 * * Before this function is called, the \ref vorbis_info struct should be<br>
	 * initialized by using vorbis_info_init() from the libvorbis API, one of<br>
	 * \ref vorbis_encode_setup_managed() or \ref vorbis_encode_setup_vbr() called to<br>
	 * initialize the high-level encoding setup, and \ref vorbis_encode_ctl()<br>
	 * called if necessary to make encoding setup changes.<br>
	 * vorbis_encode_setup_init() finalizes the highlevel encoding structure into<br>
	 * a complete encoding setup after which the application may make no further<br>
	 * setup changes.<br>
	 * * After encoding, vorbis_info_clear() should be called.<br>
	 * * \param vi Pointer to an initialized \ref vorbis_info struct.<br>
	 * * \return Zero for success, and negative values for failure.<br>
	 * * \retval  0           Success.<br>
	 * \retval  OV_EFAULT  Internal logic fault; indicates a bug or heap/stack corruption.<br>
	 * * \retval OV_EINVAL   Attempt to use vorbis_encode_setup_init() without first<br>
	 * calling one of vorbis_encode_setup_managed() or vorbis_encode_setup_vbr() to<br>
	 * initialize the high-level encoding setup<br>
	 * Original signature : <code>int vorbis_encode_setup_init(vorbis_info*)</code><br>
	 * <i>native declaration : /home/yonran/Downloads/libvorbis-1.3.3/include/vorbis/vorbisenc.h:112</i>
	 */
	int vorbis_encode_setup_init(vorbis_info vi);
	/**
	 * This function implements a generic interface to miscellaneous encoder<br>
	 * settings similar to the classic UNIX 'ioctl()' system call.  Applications<br>
	 * may use vorbis_encode_ctl() to query or set bitrate management or quality<br>
	 * mode details by using one of several \e request arguments detailed below.<br>
	 * vorbis_encode_ctl() must be called after one of<br>
	 * vorbis_encode_setup_managed() or vorbis_encode_setup_vbr().  When used<br>
	 * to modify settings, \ref vorbis_encode_ctl() must be called before \ref<br>
	 * vorbis_encode_setup_init().<br>
	 * * \param vi      Pointer to an initialized vorbis_info struct.<br>
	 * * \param number Specifies the desired action; See \ref encctlcodes "the list<br>
	 * of available requests".<br>
	 * * \param arg void * pointing to a data structure matching the request<br>
	 * argument.<br>
	 * * \retval 0          Success. Any further return information (such as the result of a<br>
	 * query) is placed into the storage pointed to by *arg.<br>
	 * * \retval OV_EINVAL  Invalid argument, or an attempt to modify a setting after<br>
	 * calling vorbis_encode_setup_init().<br>
	 * * \retval OV_EIMPL   Unimplemented or unknown request<br>
	 * Original signature : <code>int vorbis_encode_ctl(vorbis_info*, int, void*)</code><br>
	 * <i>native declaration : /home/yonran/Downloads/libvorbis-1.3.3/include/vorbis/vorbisenc.h:134</i>
	 */
	int vorbis_encode_ctl(vorbis_info vi, int number, Pointer arg);
}
